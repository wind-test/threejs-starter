{"version":3,"sources":["pages/chapter1-2/index.tsx","pages/chapter11-1/index.tsx","pages/chapter11-2/index.tsx","pages/chapter12-1/index.tsx","pages/chapter2-1/index.tsx","pages/chapter2-2/index.tsx","pages/chapter2-3/index.tsx","pages/chapter3-1/index.tsx","pages/chapter3-2/index.tsx","pages/chapter4-1/index.tsx","pages/chapter4-2/index.tsx","pages/chapter4-3/index.tsx","pages/chapter4-4/index.tsx","pages/chapter4-5/index.tsx","pages/chapter4-6/index.tsx","pages/chapter5-1/index.tsx","pages/chapter5-2/index.tsx","pages/chapter5-3/index.tsx","pages/chapter6-1/index.tsx","pages/chapter6-2/index.tsx","pages/chapter6-3/index.tsx","pages/chapter7-1/index.tsx","pages/chapter9-1/index.tsx","pages/chapter9-2/index.tsx","pages/ScrollFull3d/index.tsx","pages/chapter1-1/index.tsx","pages/chapter10-1/index.tsx","pages/chapter10-2/index.tsx","pages/chapter11-1/shader/vertex.js","pages/chapter11-1/shader/fragment.js","pages/chapter11-2/shader/vertex.js","pages/chapter11-2/shader/fragment.js","pages/chapter12-1/shader/fragment_1.js","pages/chapter12-1/shader/vertex.js","pages/chapter12-1/shader/fragment_2.js","pages/chapter12-1/shader/fragment_3.js","pages/chapter12-1/shader/fragment_4.js","pages/chapter12-1/shader/fragment_5.js","pages/chapter12-1/shader/fragment_6.js","pages/chapter8-1/index.tsx","consts/menu.ts","utils/useSelectedMenu.ts","components/SideMunu.tsx","components/PageHeader.tsx","consts/pages.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["scene","renderer","camera","controls","axesHelper","clock","mesh","points_1","points_2","points_3","points","geometry","material","rayCaster","mouse","redMaterial","Title","Typography","Chapter1_1","Text","Paragraph","style","padding","level","Chapter1_2","ref","useRef","size","useSize","useEffect","THREE","color","add","point","position","set","ambient","current","appendChild","domElement","initThree","width","height","Number","k","s","lookAt","setSize","setClearColor","render","changeSize","id","Chapter10_1","canvas","document","getElementById","gl","getContext","viewport","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","useProgram","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","vertices","Float32Array","bufferData","STATIC_DRAW","a_Position","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","drawArrays","TRIANGLES","Chapter10_2","scale","x","y","z","animate","mat","u_Mat","getUniformLocation","uniformMatrix4fv","requestAnimationFrame","Chapter11_1","update","fullScreen","fullscreenElement","exitFullscreen","requestFullscreen","shaderMaterial","window","innerWidth","innerHeight","OrbitControls","addEventListener","removeEventListener","aspect","updateProjectionMatrix","setPixelRatio","devicePixelRatio","Chapter11_2","texture","load","rawShaderMaterial","side","uniforms","uTime","value","uTexture","elapsedTime","getElapsedTime","FragmentShader_1","Chapter12_1","params","ShaderMaterial","uColor","uFrequency","uScale","transparent","GUI","name","onChange","needsUpdate","Chapter2_1","rotation","Math","PI","Chapter2_2","time","offSet","stop","start","Chapter2_3","console","log","panel","visible","addColor","v","positionPanel","addFolder","min","max","step","Chapter3_1","normals","indexes","Uint16Array","setAttribute","index","Chapter3_2","triangleVertices","push","random","wireframe","Chapter4_1","useState","loadTip","setLoadTip","loadingManager","onStart","url","itemsLoaded","itemsTotal","onProgress","onLoad","onError","textureLoader","colorTexture","map","className","Chapter4_2","repeat","wrapS","wrapT","offset","center","Vector2","Chapter4_3","minFilter","magFilter","Chapter4_4","AlphaTexture","AoTexture","alphaMap","opacity","aoMap","aoMapIntensity","attributes","uv","array","Chapter4_5","ColorTexture","DisplaceTexture","RoughnessTexture","MetalnessTexture","NormalTexture","displacementMap","displacementScale","roughnessMap","roughness","metalnessMap","metalness","normalMap","basicMaterialPanel","hasMap","none","standardMaterialPanel","directionalLight","textureType","envMap","Chapter4_6","hdrTexture","envMapTexture","RGBELoader","loadAsync","then","mapping","background","environment","Chapter5_1","castShadow","planeGeometry","plane","receiveShadow","shadow","near","far","top","bottom","left","right","directionalLightPanel","shadowMap","enabled","Chapter5_2","spotLight","intensity","radius","mapSize","target","angle","distance","penumbra","decay","spotLightPanel","physicallyCorrectLights","Chapter5_3","smallBall","pointLight","pointLightPanel","Chapter6_1","widthSegments","heightSegments","sizeAttenuation","depthWrite","blending","dispose","Chapter6_2","createPoints","particlesGeometry","count","positions","colors","i","pointsMaterial","vertexColors","branch","spin","randomness","randomnessPower","insideColor","outsideColor","Chapter6_3","generateGalaxy","remove","branchesAngle","spinAngle","colorInside","colorOutside","mixedColor","clone","lerp","r","g","b","randomX","randomY","randomZ","cos","sin","enableDamping","zoomSpeed","gui","onFinishChange","close","cubeArr","Chapter7_1","boxGeometry","j","cube","mouseClick","event","offsetX","offsetY","setFromCamera","result","intersectObjects","forEach","item","object","length","Chapter8_1","to","menu","label","key","children","path","component","dirLight","sphereGeometry","sphereMaterial","sphere","floor","world","CANNON","gravity","sphereShape","sphereWorldMaterial","sphereBody","shape","mass","addBody","floorShape","floorBody","addShape","quaternion","setFromAxisAngle","deltaTime","getDelta","copy","hitSound","Audio","cubeWorldMaterial","cubeGeometry","cubeMaterial","cubeShape","cubeBody","applyLocalForce","e","impactStrength","contact","getImpactVelocityAlongNormal","currentTime","volume","play","body","floorMaterial","defaultContactMaterial","friction","restitution","addContactMaterial","useSelectedMenu","useImmer","selectedKeys","openKeys","title","state","setState","pathname","useLocation","child","SubMenu","Menu","SideMenu","mode","Item","onClick","location","href","host","PageHeader","marginLeft","previousTime","sectionMeshes","parameters","materialColor","objectsDistance","currentSection","isPortrait","pages","mouseMove","clientX","clientY","scrollAnimation","scrollY","newSection","round","gsap","duration","ease","querySelector","cameraGroup","sizes","setZ","gradientTexture","gradientMap","mesh1","mesh2","mesh3","particlesCount","particlesMaterial","particels","setX","setY","directionLight","ambientLight","antialias","alpha","parallaxX","parallaxY","dat","Sider","Layout","Header","Content","App","collapsed","setCollapsed","includes","element","collapsible","onCollapse","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.00d8d881.chunk.js","sourcesContent":["/*\n * @Title: three.js快速上手第一个项目\n * @Author: huangjitao\n * @Date: 2022-09-07 16:31:50\n * @Description: description of this file\n */\n\nimport { useSize } from \"ahooks\";\nimport { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\n\nlet scene: THREE.Scene | THREE.Object3D<THREE.Event>, renderer: THREE.WebGLRenderer, camera: THREE.Camera\n\nconst Chapter1_2 = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const size = useSize(ref);\n\n  const initThree = () => {\n    /** --- 创建一个场景 --- */\n    scene = new THREE.Scene()\n\n    /** --- 创建一个网格模型 --- */\n    // 创建一个几何体\n    const geometry = new THREE.BoxGeometry(100, 100, 100);\n    // 创建一个材质对象\n    const material = new THREE.MeshLambertMaterial({ color: 0x0000ff });\n    // 创建一个网格模型对象\n    const mesh = new THREE.Mesh(geometry, material)\n    // 将网格模型对象添加到场景中\n    scene.add(mesh)\n\n    /** --- 设置光源 --- */\n    // 点光源\n    const point = new THREE.PointLight(0xffffff);\n    point.position.set(400, 200, 300);\n    scene.add(point); //点光源添加到场景中\n    //环境光\n    const ambient = new THREE.AmbientLight(0x444444);\n    scene.add(ambient);\n\n    // 创建渲染器\n    renderer = new THREE.WebGLRenderer();\n    ref.current?.appendChild(renderer.domElement); //body元素中插入canvas对象\n  }\n\n  const changeSize = () => {\n    /** --- 相机设置 --- */\n    const width = Number(size?.width); //窗口宽度\n    const height = Number(size?.height); //窗口高度\n    const k = width / height; //窗口宽高比\n    const s = 200; //三维场景显示范围控制系数，系数越大，显示的范围越大\n    // 创建相机\n    camera = new THREE.OrthographicCamera(-s * k, s * k, s, -s, 1, 1000);\n    camera.position.set(200, 300, 200); //设置相机位置\n    camera.lookAt(scene.position); //设置相机方向(指向的场景对象)\n\n    /** --- 渲染器设置 ---*/\n    renderer.setSize(width, height);//设置渲染区域尺寸\n    renderer.setClearColor(0xb9d3ff, 1); //设置背景颜色\n    //执行渲染操作   指定场景、相机作为参数\n    renderer.render(scene, camera);\n  }\n\n  useEffect(() => {\n    // 初始化three场景\n    initThree()\n  }, [])\n\n  useEffect(() => {\n    if (size?.width && size?.height) {\n      // 场景大小根据浏览器自适应\n      changeSize()\n    }\n  }, [size?.width, size?.height])\n\n  return (\n    <div\n      id=\"container\"\n      style={{ width: '100%', height: '100%' }}\n      ref={ref}\n    />\n  );\n}\n\nexport default Chapter1_2\n","/*\n * @Title: 着色器材质\n * @Author: huangjitao\n * @Date: 2022-11-28 10:08:07\n * @Description: 结合Three.js和着色器语言，使用着色器材质（ShaderMaterial）创建平面\n */\n\nimport { useSize } from \"ahooks\";\nimport { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport VertexShader from './shader/vertex';\nimport FragmentShader from './shader/fragment'\n\nlet scene: THREE.Scene | THREE.Object3D<THREE.Event>,\n  renderer: THREE.WebGLRenderer,\n  camera: THREE.PerspectiveCamera,\n  controls: OrbitControls,\n  axesHelper;\n\nconst Chapter11_1 = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const size = useSize(ref);\n\n  const initThree = () => {\n    /** --- 创建一个场景 --- */\n    scene = new THREE.Scene();\n\n    /** --- 创建一个网格模型 --- */\n    // 创建一个几何体\n    const geometry = new THREE.PlaneGeometry(1, 1, 64, 64)\n    // 创建一个材质对象\n    const shaderMaterial = new THREE.ShaderMaterial({\n      vertexShader: VertexShader,\n      fragmentShader: FragmentShader,\n    })\n\n    // 创建一个网格模型对象\n    const mesh = new THREE.Mesh(geometry, shaderMaterial);\n    // 将网格模型对象添加到场景中\n    scene.add(mesh);\n\n    /** --- 设置光源 --- */\n    // 点光源\n    const point = new THREE.PointLight(0xffffff);\n    point.position.set(4, 2, 3);\n    scene.add(point); //点光源添加到场景中\n    //环境光\n    const ambient = new THREE.AmbientLight(0x444444);\n    scene.add(ambient);\n\n    /** ---添加坐标辅助--- */\n    axesHelper = new THREE.AxesHelper(5);\n    scene.add(axesHelper);\n\n    /** --- 相机设置 --- */\n    // 创建相机\n    camera = new THREE.PerspectiveCamera(\n      90,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    // 设置相机位置\n    camera.position.set(0, 0, 2);\n    //设置相机方向(指向的场景对象)\n    camera.lookAt(scene.position);\n\n    // 创建渲染器\n    renderer = new THREE.WebGLRenderer();\n    renderer.setClearColor(0xb9d3ff, 1); //设置背景颜色\n    renderer.render(scene, camera);\n    ref.current?.appendChild(renderer.domElement); //body元素中插入canvas对象\n\n    /** ---创建轨道控制器--- */\n    controls = new OrbitControls(camera, renderer.domElement);\n    render();\n  };\n\n  const changeSize = () => {\n    /** --- 相机设置 --- */\n    const width = Number(size?.width); //窗口宽度\n    const height = Number(size?.height); //窗口高度\n\n    // 更新摄像头\n    camera.aspect = width / height;\n    // 更新摄像机的投影矩阵\n    camera.updateProjectionMatrix();\n\n    //  更新渲染区域尺寸\n    renderer.setSize(width, height);\n    //  设置渲染器的像素比\n    renderer.setPixelRatio(window.devicePixelRatio);\n  };\n\n  function render() {\n    controls.update();\n    renderer.render(scene, camera);\n    // 渲染下一帧的时候就会调用render函数\n    requestAnimationFrame(render);\n  }\n\n  const fullScreen = () => {\n    const fullScreenElement = document.fullscreenElement;\n    if (!fullScreenElement) {\n      // 让画布对象全屏\n      renderer.domElement.requestFullscreen();\n    } else {\n      //   退出全屏，使用document对象\n      document.exitFullscreen();\n    }\n  };\n\n  useEffect(() => {\n    // 初始化three场景\n    initThree();\n    window.addEventListener(\"dblclick\", fullScreen);\n    return () => {\n      window.removeEventListener(\"dblclick\", fullScreen);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (size?.width && size?.height) {\n      // 场景大小根据浏览器自适应\n      changeSize();\n    }\n  }, [size?.width, size?.height]);\n\n  return (\n    <div id=\"container\" style={{ width: \"100%\", height: \"100%\" }} ref={ref} />\n  );\n};\n\nexport default Chapter11_1;\n","/*\n * @Title: 着色器材质\n * @Author: huangjitao\n * @Date: 2022-11-28 10:08:07\n * @Description: 结合Three.js和着色器语言，使用着色器材质（ShaderMaterial）创建平面\n */\n\nimport { useSize } from \"ahooks\";\nimport { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport VertexShader from './shader/vertex';\nimport FragmentShader from './shader/fragment'\n\nlet scene: THREE.Scene | THREE.Object3D<THREE.Event>,\n  renderer: THREE.WebGLRenderer,\n  camera: THREE.PerspectiveCamera\n\nconst Chapter11_2 = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const size = useSize(ref);\n\n  const initThree = () => {\n    /** --- 创建一个场景 --- */\n    scene = new THREE.Scene();\n\n    // 创建纹理加载器对象\n    const textureLoader = new THREE.TextureLoader();\n    const texture = textureLoader.load(\"/textures/flag_paralympic.jpeg\");\n\n    /** --- 创建一个网格模型 --- */\n    // 创建一个几何体\n    const geometry = new THREE.PlaneGeometry(1, 1, 64, 64)\n    // 创建一个材质对象\n    const rawShaderMaterial = new THREE.RawShaderMaterial({\n      vertexShader: VertexShader,\n      fragmentShader: FragmentShader,\n      side: THREE.DoubleSide,\n      uniforms: {\n        uTime: {\n          value: 0,\n        },\n        uTexture: {\n          value: texture,\n        },\n      }\n    })\n\n    // 创建一个网格模型对象\n    const mesh = new THREE.Mesh(geometry, rawShaderMaterial);\n    // 将网格模型对象添加到场景中\n    scene.add(mesh);\n\n    /** --- 设置光源 --- */\n    // 点光源\n    const point = new THREE.PointLight(0xffffff);\n    point.position.set(4, 2, 3);\n    scene.add(point); //点光源添加到场景中\n    //环境光\n    const ambient = new THREE.AmbientLight(0x444444);\n    scene.add(ambient);\n\n    /** ---添加坐标辅助--- */\n    const axesHelper = new THREE.AxesHelper(5);\n    scene.add(axesHelper);\n\n    /** --- 相机设置 --- */\n    // 创建相机\n    camera = new THREE.PerspectiveCamera(\n      90,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    // 设置相机位置\n    camera.position.set(0, 0, 2);\n    //设置相机方向(指向的场景对象)\n    camera.lookAt(scene.position);\n\n    // 创建渲染器\n    renderer = new THREE.WebGLRenderer();\n    renderer.setClearColor(0xb9d3ff, 1); //设置背景颜色\n    renderer.render(scene, camera);\n    ref.current?.appendChild(renderer.domElement); //body元素中插入canvas对象\n\n    /** ---创建轨道控制器--- */\n    const controls = new OrbitControls(camera, renderer.domElement);\n\n    const clock = new THREE.Clock();\n    function render() {\n      const elapsedTime = clock.getElapsedTime();\n      rawShaderMaterial.uniforms.uTime.value = elapsedTime;\n      controls.update();\n      renderer.render(scene, camera);\n      // 渲染下一帧的时候就会调用render函数\n      requestAnimationFrame(render);\n    }\n    render();\n  };\n\n  const changeSize = () => {\n    /** --- 相机设置 --- */\n    const width = Number(size?.width); //窗口宽度\n    const height = Number(size?.height); //窗口高度\n\n    // 更新摄像头\n    camera.aspect = width / height;\n    // 更新摄像机的投影矩阵\n    camera.updateProjectionMatrix();\n\n    //  更新渲染区域尺寸\n    renderer.setSize(width, height);\n    //  设置渲染器的像素比\n    renderer.setPixelRatio(window.devicePixelRatio);\n  };\n\n  const fullScreen = () => {\n    const fullScreenElement = document.fullscreenElement;\n    if (!fullScreenElement) {\n      // 让画布对象全屏\n      renderer.domElement.requestFullscreen();\n    } else {\n      //   退出全屏，使用document对象\n      document.exitFullscreen();\n    }\n  };\n\n  useEffect(() => {\n    // 初始化three场景\n    initThree();\n    window.addEventListener(\"dblclick\", fullScreen);\n    return () => {\n      window.removeEventListener(\"dblclick\", fullScreen);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (size?.width && size?.height) {\n      // 场景大小根据浏览器自适应\n      changeSize();\n    }\n  }, [size?.width, size?.height]);\n\n  return (\n    <div id=\"container\" style={{ width: \"100%\", height: \"100%\" }} ref={ref} />\n  );\n};\n\nexport default Chapter11_2;\n","/*\n * @Title: 着色器材质\n * @Author: huangjitao\n * @Date: 2022-11-28 10:08:07\n * @Description: 结合Three.js和着色器语言，使用着色器材质（ShaderMaterial）创建平面\n */\n\nimport { useSize } from \"ahooks\";\nimport { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport VertexShader from './shader/vertex';\nimport GUI from \"lil-gui\";\nimport FragmentShader_1 from './shader/fragment_1';\nimport FragmentShader_2 from './shader/fragment_2';\nimport FragmentShader_3 from \"./shader/fragment_3\";\nimport FragmentShader_4 from \"./shader/fragment_4\";\nimport FragmentShader_5 from \"./shader/fragment_5\";\nimport FragmentShader_6 from \"./shader/fragment_6\";\n\nlet scene: THREE.Scene | THREE.Object3D<THREE.Event>,\n  renderer: THREE.WebGLRenderer,\n  camera: THREE.PerspectiveCamera\n\nconst Chapter12_1 = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const size = useSize(ref);\n\n  const initThree = () => {\n    /** --- 创建一个场景 --- */\n    scene = new THREE.Scene();\n\n    // 创建纹理加载器对象\n    const textureLoader = new THREE.TextureLoader();\n    const texture = textureLoader.load(\"/textures/flag_paralympic.jpeg\");\n\n    const params = {\n      uFrequency: 10,\n      uScale: 0.1,\n    };\n\n    /** --- 创建一个网格模型 --- */\n    // 创建一个几何体\n    const geometry = new THREE.PlaneGeometry(1, 1, 64, 64)\n    // 创建一个材质对象\n    const ShaderMaterial = new THREE.ShaderMaterial({\n      vertexShader: VertexShader,\n      fragmentShader: FragmentShader_1,\n      uniforms: {\n        uColor: {\n          value: new THREE.Color(\"purple\"),\n        },\n        // 波浪的频率\n        uFrequency: {\n          value: params.uFrequency,\n        },\n        // 波浪的幅度\n        uScale: {\n          value: params.uScale,\n        },\n        // 动画时间\n        uTime: {\n          value: 0,\n        },\n        uTexture: {\n          value: texture,\n        },\n      },\n      side: THREE.DoubleSide,\n      transparent: true,\n    })\n\n    // 创建一个网格模型对象\n    const mesh = new THREE.Mesh(geometry, ShaderMaterial);\n    // 将网格模型对象添加到场景中\n    scene.add(mesh);\n\n    /** --- 设置光源 --- */\n    // 点光源\n    const point = new THREE.PointLight(0xffffff);\n    point.position.set(4, 2, 3);\n    scene.add(point); //点光源添加到场景中\n    //环境光\n    const ambient = new THREE.AmbientLight(0x444444);\n    scene.add(ambient);\n\n    /** ---添加坐标辅助--- */\n    const axesHelper = new THREE.AxesHelper(5);\n    scene.add(axesHelper);\n\n    /** --- 相机设置 --- */\n    // 创建相机\n    camera = new THREE.PerspectiveCamera(\n      90,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    // 设置相机位置\n    camera.position.set(0, 0, 2);\n    //设置相机方向(指向的场景对象)\n    camera.lookAt(scene.position);\n\n    // 创建渲染器\n    renderer = new THREE.WebGLRenderer();\n    renderer.setClearColor(0xb9d3ff, 1); //设置背景颜色\n    renderer.render(scene, camera);\n    ref.current?.appendChild(renderer.domElement); //body元素中插入canvas对象\n\n    /** ---创建图形界面工具--- */\n    const panel = new GUI();\n    panel\n      .add(ShaderMaterial, \"fragmentShader\", {\n        '1': FragmentShader_1,\n        '2': FragmentShader_2,\n        '3': FragmentShader_3,\n        '4': FragmentShader_4,\n        '5': FragmentShader_5,\n        '6': FragmentShader_6,\n      })\n      .name('片元着色器')\n      .onChange((value: any) => {\n        ShaderMaterial.fragmentShader = value;\n        ShaderMaterial.needsUpdate = true;\n      })\n\n    /** ---创建轨道控制器--- */\n    const controls = new OrbitControls(camera, renderer.domElement);\n\n    const clock = new THREE.Clock();\n    function render() {\n      const elapsedTime = clock.getElapsedTime();\n      ShaderMaterial.uniforms.uTime.value = elapsedTime;\n      controls.update();\n      renderer.render(scene, camera);\n      // 渲染下一帧的时候就会调用render函数\n      requestAnimationFrame(render);\n    }\n    render();\n  };\n\n  const changeSize = () => {\n    /** --- 相机设置 --- */\n    const width = Number(size?.width); //窗口宽度\n    const height = Number(size?.height); //窗口高度\n\n    // 更新摄像头\n    camera.aspect = width / height;\n    // 更新摄像机的投影矩阵\n    camera.updateProjectionMatrix();\n\n    //  更新渲染区域尺寸\n    renderer.setSize(width, height);\n    //  设置渲染器的像素比\n    renderer.setPixelRatio(window.devicePixelRatio);\n  };\n\n  const fullScreen = () => {\n    const fullScreenElement = document.fullscreenElement;\n    if (!fullScreenElement) {\n      // 让画布对象全屏\n      renderer.domElement.requestFullscreen();\n    } else {\n      //   退出全屏，使用document对象\n      document.exitFullscreen();\n    }\n  };\n\n  useEffect(() => {\n    // 初始化three场景\n    initThree();\n    window.addEventListener(\"dblclick\", fullScreen);\n    return () => {\n      window.removeEventListener(\"dblclick\", fullScreen);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (size?.width && size?.height) {\n      // 场景大小根据浏览器自适应\n      changeSize();\n    }\n  }, [size?.width, size?.height]);\n\n  return (\n    <div id=\"container\" style={{ width: \"100%\", height: \"100%\" }} ref={ref} />\n  );\n};\n\nexport default Chapter12_1;\n","/*\n * @Title: three.js的基本操作\n * @Author: huangjitao\n * @Date: 2022-09-14 17:27:20\n * @Description: 轨道控制器、移动、翻转、缩放等\n */\nimport { useSize } from \"ahooks\";\nimport { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n\nlet scene: THREE.Scene | THREE.Object3D<THREE.Event>, renderer: THREE.WebGLRenderer, camera: THREE.PerspectiveCamera,\n  controls: OrbitControls, axesHelper\n\nconst Chapter2_1 = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const size = useSize(ref);\n\n  const initThree = () => {\n    /** --- 创建一个场景 --- */\n    scene = new THREE.Scene()\n\n    /** --- 创建一个网格模型 --- */\n    // 创建一个几何体\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n    // 创建一个材质对象\n    const material = new THREE.MeshLambertMaterial({ color: 0x0000ff });\n    // 创建一个网格模型对象\n    const mesh = new THREE.Mesh(geometry, material)\n    // 将网格模型对象添加到场景中\n    scene.add(mesh)\n\n    /** --- 设置光源 --- */\n    // 点光源\n    const point = new THREE.PointLight(0xffffff);\n    point.position.set(4, 2, 3);\n    scene.add(point); //点光源添加到场景中\n    //环境光\n    const ambient = new THREE.AmbientLight(0x444444);\n    scene.add(ambient);\n\n    /** ---添加坐标辅助--- */\n    axesHelper = new THREE.AxesHelper(5);\n    scene.add(axesHelper);\n\n    /** --- 物体移动 --- */\n    // 修改物体的位置\n    // mesh.position.set(2, 2, 2);\n    mesh.position.x = 3;\n    // 缩放\n    // mesh.scale.set(1, 2, 3);\n    mesh.scale.y = 1.5;\n    // 旋转\n    mesh.rotation.set(Math.PI / 4, 0, 0, \"XZY\");\n\n    /** --- 相机设置 --- */\n    // 创建相机\n    camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    // 设置相机位置\n    camera.position.set(0, 0, 5);\n    //设置相机方向(指向的场景对象)\n    camera.lookAt(scene.position);\n\n    // 创建渲染器\n    renderer = new THREE.WebGLRenderer();\n    renderer.setClearColor(0xb9d3ff, 1); //设置背景颜色\n    renderer.render(scene, camera);\n    ref.current?.appendChild(renderer.domElement); //body元素中插入canvas对象\n\n    /** ---创建轨道控制器--- */\n    controls = new OrbitControls(camera, renderer.domElement);\n\n    render();\n  }\n\n  const changeSize = () => {\n    /** --- 相机设置 --- */\n    const width = Number(size?.width); //窗口宽度\n    const height = Number(size?.height); //窗口高度\n\n    // 更新摄像头\n    camera.aspect = width / height;\n    // 更新摄像机的投影矩阵\n    camera.updateProjectionMatrix();\n\n    //  更新渲染区域尺寸\n    renderer.setSize(width, height);\n    //  设置渲染器的像素比\n    renderer.setPixelRatio(window.devicePixelRatio);\n  }\n\n  function render() {\n    controls.update();\n    renderer.render(scene, camera);\n    // 渲染下一帧的时候就会调用render函数\n    requestAnimationFrame(render);\n  }\n\n  const fullScreen = () => {\n    const fullScreenElement = document.fullscreenElement;\n    if (!fullScreenElement) {\n      // 让画布对象全屏\n      renderer.domElement.requestFullscreen();\n    } else {\n      //   退出全屏，使用document对象\n      document.exitFullscreen();\n    }\n  }\n\n  useEffect(() => {\n    // 初始化three场景\n    initThree()\n    window.addEventListener(\"dblclick\", fullScreen);\n    return () => {\n      window.removeEventListener('dblclick', fullScreen)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (size?.width && size?.height) {\n      // 场景大小根据浏览器自适应\n      changeSize()\n    }\n  }, [size?.width, size?.height])\n\n  return (\n    <div\n      id=\"container\"\n      style={{ width: '100%', height: '100%' }}\n      ref={ref}\n    />\n  );\n}\n\nexport default Chapter2_1\n","/*\n * @Title: three.js的动画\n * @Author: huangjitao\n * @Date: 2022-09-14 17:27:20\n * @Description: clock动画、gsap动画、图形用户界面。\n */\nimport React from \"react\";\nimport { useSize } from \"ahooks\";\nimport { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nlet scene: THREE.Scene | THREE.Object3D<THREE.Event>,\n  renderer: THREE.WebGLRenderer,\n  camera: THREE.PerspectiveCamera,\n  controls: OrbitControls,\n  axesHelper,\n  clock: THREE.Clock,\n  mesh: THREE.Mesh;\n\nconst Chapter2_2 = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const size = useSize(ref);\n\n  const initThree = () => {\n    /** --- 创建一个场景 --- */\n    scene = new THREE.Scene();\n\n    /** --- 创建一个网格模型 --- */\n    // 创建一个几何体\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n    // 创建一个材质对象\n    const material = new THREE.MeshLambertMaterial({ color: 0x0000ff });\n    // 创建一个网格模型对象\n    mesh = new THREE.Mesh(geometry, material);\n    // 将网格模型对象添加到场景中\n    scene.add(mesh);\n\n    /** --- 设置光源 --- */\n    // 点光源\n    const point = new THREE.PointLight(0xffffff);\n    point.position.set(4, 2, 3);\n    scene.add(point); //点光源添加到场景中\n    //环境光\n    const ambient = new THREE.AmbientLight(0x444444);\n    scene.add(ambient);\n\n    /** ---添加坐标辅助--- */\n    axesHelper = new THREE.AxesHelper(5);\n    scene.add(axesHelper);\n\n    /** --- 相机设置 --- */\n    // 创建相机\n    camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    // 设置相机位置\n    camera.position.set(0, 0, 5);\n    //设置相机方向(指向的场景对象)\n    camera.lookAt(scene.position);\n\n    // 创建渲染器\n    renderer = new THREE.WebGLRenderer();\n    renderer.setClearColor(0xb9d3ff, 1); //设置背景颜色\n    renderer.render(scene, camera);\n    ref.current?.appendChild(renderer.domElement); //body元素中插入canvas对象\n\n    /** ---创建轨道控制器--- */\n    controls = new OrbitControls(camera, renderer.domElement);\n\n    /** ---创建时钟--- */\n    clock = new THREE.Clock();\n    clock.start();\n\n    /** ---渲染--- */\n    render();\n  };\n\n  const changeSize = () => {\n    /** --- 相机设置 --- */\n    const width = Number(size?.width); //窗口宽度\n    const height = Number(size?.height); //窗口高度\n\n    // 更新摄像头\n    camera.aspect = width / height;\n    // 更新摄像机的投影矩阵\n    camera.updateProjectionMatrix();\n\n    //  更新渲染区域尺寸\n    renderer.setSize(width, height);\n    //  设置渲染器的像素比\n    renderer.setPixelRatio(window.devicePixelRatio);\n  };\n\n  function render() {\n    controls.update();\n    const time = clock.getElapsedTime();\n    const offSet = time % 5;\n    if (time > 25) {\n      // 循环5次后关闭时钟\n      mesh.position.x = 0;\n      mesh.position.y = 0;\n      clock.stop();\n    } else {\n      mesh.position.x = offSet;\n      mesh.position.y = offSet;\n    }\n    renderer.render(scene, camera);\n    // 渲染下一帧的时候就会调用render函数\n    requestAnimationFrame(render);\n  }\n\n  const fullScreen = () => {\n    const fullScreenElement = document.fullscreenElement;\n    if (!fullScreenElement) {\n      // 让画布对象全屏\n      renderer.domElement.requestFullscreen();\n    } else {\n      //   退出全屏，使用document对象\n      document.exitFullscreen();\n    }\n  };\n\n  useEffect(() => {\n    // 初始化three场景\n    initThree();\n    // 添加双击时间\n    window.addEventListener(\"dblclick\", fullScreen);\n    return () => {\n      window.removeEventListener(\"dblclick\", fullScreen);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (size?.width && size?.height) {\n      // 场景大小根据浏览器自适应\n      changeSize();\n    }\n  }, [size?.width, size?.height]);\n\n  return (\n    <div id=\"container\" style={{ width: \"100%\", height: \"100%\" }} ref={ref} />\n  );\n};\n\nexport default Chapter2_2;\n","import React from \"react\";\nimport { useSize } from \"ahooks\";\nimport { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport GUI from \"lil-gui\";\nimport { MeshLambertMaterial } from \"three\";\n\nlet scene: THREE.Scene | THREE.Object3D<THREE.Event>,\n  renderer: THREE.WebGLRenderer,\n  camera: THREE.PerspectiveCamera,\n  controls: OrbitControls,\n  axesHelper,\n  mesh: THREE.Mesh;\n\nconst Chapter2_3 = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const size = useSize(ref);\n\n  const initThree = () => {\n    /** --- 创建一个场景 --- */\n    scene = new THREE.Scene();\n\n    /** --- 创建一个网格模型 --- */\n    // 创建一个几何体\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n    // 创建一个材质对象\n    const material = new THREE.MeshLambertMaterial({ color: 0x0000ff });\n    // 创建一个网格模型对象\n    mesh = new THREE.Mesh(geometry, material);\n    console.log(\"mesh:\", mesh);\n    // 将网格模型对象添加到场景中\n    scene.add(mesh);\n\n    /** --- 设置光源 --- */\n    // 点光源\n    const point = new THREE.PointLight(0xffffff);\n    point.position.set(4, 2, 3);\n    scene.add(point); //点光源添加到场景中\n    //环境光\n    const ambient = new THREE.AmbientLight(0x444444);\n    scene.add(ambient);\n\n    /** ---添加坐标辅助--- */\n    axesHelper = new THREE.AxesHelper(5);\n    scene.add(axesHelper);\n\n    /** --- 相机设置 --- */\n    // 创建相机\n    camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    // 设置相机位置\n    camera.position.set(0, 0, 5);\n    //设置相机方向(指向的场景对象)\n    camera.lookAt(scene.position);\n\n    // 创建渲染器\n    renderer = new THREE.WebGLRenderer();\n    renderer.setClearColor(0xb9d3ff, 1); //设置背景颜色\n    renderer.render(scene, camera);\n    ref.current?.appendChild(renderer.domElement); //body元素中插入canvas对象\n\n    /** ---创建轨道控制器--- */\n    controls = new OrbitControls(camera, renderer.domElement);\n\n    /** ---创建图形界面工具--- */\n    const panel = new GUI();\n    panel\n      .add(mesh, \"visible\")\n      .name(\"显示物体\")\n      .onChange(() => console.log(`当前物体是否显示：${mesh.visible}`));\n    panel\n      .addColor(mesh.material, \"color\")\n      .name(\"改变物体颜色\")\n      .onChange((v: string) => {\n        const material = mesh.material as MeshLambertMaterial\n        material.color.set(v)\n      });\n    const positionPanel = panel.addFolder(\"移动物体位置\");\n    positionPanel\n      .add(mesh.position, \"x\")\n      .min(0)\n      .max(5)\n      .step(0.01)\n      .name(\"移动x轴\");\n    positionPanel\n      .add(mesh.position, \"y\")\n      .min(0)\n      .max(5)\n      .step(0.01)\n      .name(\"移动y轴\");\n    positionPanel\n      .add(mesh.position, \"z\")\n      .min(0)\n      .max(5)\n      .step(0.01)\n      .name(\"移动z轴\");\n\n    /** ---渲染--- */\n    render();\n  };\n\n  const changeSize = () => {\n    /** --- 相机设置 --- */\n    const width = Number(size?.width); //窗口宽度\n    const height = Number(size?.height); //窗口高度\n\n    // 更新摄像头\n    camera.aspect = width / height;\n    // 更新摄像机的投影矩阵\n    camera.updateProjectionMatrix();\n\n    //  更新渲染区域尺寸\n    renderer.setSize(width, height);\n    //  设置渲染器的像素比\n    renderer.setPixelRatio(window.devicePixelRatio);\n  };\n\n  function render() {\n    controls.update();\n    renderer.render(scene, camera);\n    // 渲染下一帧的时候就会调用render函数\n    requestAnimationFrame(render);\n  }\n\n  const fullScreen = () => {\n    const fullScreenElement = document.fullscreenElement;\n    if (!fullScreenElement) {\n      // 让画布对象全屏\n      renderer.domElement.requestFullscreen();\n    } else {\n      //   退出全屏，使用document对象\n      document.exitFullscreen();\n    }\n  };\n\n  useEffect(() => {\n    // 初始化three场景\n    initThree();\n    // 添加双击时间\n    window.addEventListener(\"dblclick\", fullScreen);\n    return () => {\n      window.removeEventListener(\"dblclick\", fullScreen);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (size?.width && size?.height) {\n      // 场景大小根据浏览器自适应\n      changeSize();\n    }\n  }, [size?.width, size?.height]);\n\n  return (\n    <div id=\"container\" style={{ width: \"100%\", height: \"100%\" }} ref={ref} />\n  );\n};\n\nexport default Chapter2_3;\n","/*\n * @Title: three.js自定义几何体\n * @Author: huangjitao\n * @Date: 2022-09-14 17:27:20\n * @Description: 深入研究three.js中的geometry，自定义一个矩形\n */\nimport { useSize } from \"ahooks\";\nimport { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nlet scene: THREE.Scene | THREE.Object3D<THREE.Event>,\n  renderer: THREE.WebGLRenderer,\n  camera: THREE.PerspectiveCamera,\n  controls: OrbitControls,\n  axesHelper;\n\nconst Chapter3_1 = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const size = useSize(ref);\n\n  const initThree = () => {\n    /** --- 创建一个场景 --- */\n    scene = new THREE.Scene();\n\n    /** --- 创建一个网格模型 --- */\n    // 创建一个几何体\n    const geometry = new THREE.BufferGeometry();\n    // // 因为在两个三角面片里，一共有六个顶点，其中两个顶点是一模一样的。\n    // const vertices = new Float32Array([\n    //   -1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0,\n    //   1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0, 1.0,\n    // ]);\n    // // 顶点的法线向量，设置后可以突出光照\n    // const normals = new Float32Array([\n    //   0,0,1,0,0,1,0,0,1,\n    //   0,0,1,0,0,1,0,0,1\n    // ])\n    // // 一个顶点由三个坐标表示，因此创建时，三个坐标值为一组\n    // geometry.setAttribute(\"position\", new THREE.BufferAttribute(vertices, 3));\n    // geometry.setAttribute(\"normal\", new THREE.BufferAttribute(normals, 3))\n\n    // 使用index（索引）复用顶点\n    const vertices = new Float32Array([\n      -1.0, -1.0, 1.0,   1.0, -1.0, 1.0,\n      1.0, 1.0, 1.0,   -1.0, 1.0, 1.0, \n    ]);\n    // 顶点的法线向量，设置后可以突出光照\n    const normals = new Float32Array([\n      0, 0, 1, 0, 0, 1,\n      0, 0, 1, 0, 0, 1\n    ])\n    const indexes = new Uint16Array([\n      // 0对应第1个顶点位置数据、第1个顶点法向量数据\n      // 1对应第2个顶点位置数据、第2个顶点法向量数据\n      // 索引值3个为一组，表示一个三角形的3个顶点\n      0, 1, 2,\n      0, 2, 3,\n    ])\n    // 一个顶点由三个坐标表示，因此创建时，三个坐标值为一组\n    geometry.setAttribute(\"position\", new THREE.BufferAttribute(vertices, 3));\n    geometry.setAttribute(\"normal\", new THREE.BufferAttribute(normals, 3))\n    geometry.index = new THREE.BufferAttribute(indexes, 1)\n\n    // 创建一个材质对象\n    const material = new THREE.MeshLambertMaterial({ color: 0x0000ff });\n    // 创建一个网格模型对象\n    const mesh = new THREE.Mesh(geometry, material);\n    // 将网格模型对象添加到场景中\n    scene.add(mesh);\n\n    /** --- 设置光源 --- */\n    // 点光源\n    const point = new THREE.PointLight(0xffffff);\n    point.position.set(4, 2, 3);\n    scene.add(point); //点光源添加到场景中\n    //环境光\n    const ambient = new THREE.AmbientLight(0x444444);\n    scene.add(ambient);\n\n    /** ---添加坐标辅助--- */\n    axesHelper = new THREE.AxesHelper(5);\n    scene.add(axesHelper);\n\n    /** --- 相机设置 --- */\n    // 创建相机\n    camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    // 设置相机位置\n    camera.position.set(0, 0, 5);\n    //设置相机方向(指向的场景对象)\n    camera.lookAt(scene.position);\n\n    // 创建渲染器\n    renderer = new THREE.WebGLRenderer();\n    renderer.setClearColor(0xb9d3ff, 1); //设置背景颜色\n    renderer.render(scene, camera);\n    ref.current?.appendChild(renderer.domElement); //body元素中插入canvas对象\n\n    /** ---创建轨道控制器--- */\n    controls = new OrbitControls(camera, renderer.domElement);\n\n    render();\n  };\n\n  const changeSize = () => {\n    /** --- 相机设置 --- */\n    const width = Number(size?.width); //窗口宽度\n    const height = Number(size?.height); //窗口高度\n\n    // 更新摄像头\n    camera.aspect = width / height;\n    // 更新摄像机的投影矩阵\n    camera.updateProjectionMatrix();\n\n    //  更新渲染区域尺寸\n    renderer.setSize(width, height);\n    //  设置渲染器的像素比\n    renderer.setPixelRatio(window.devicePixelRatio);\n  };\n\n  function render() {\n    controls.update();\n    renderer.render(scene, camera);\n    // 渲染下一帧的时候就会调用render函数\n    requestAnimationFrame(render);\n  }\n\n  const fullScreen = () => {\n    const fullScreenElement = document.fullscreenElement;\n    if (!fullScreenElement) {\n      // 让画布对象全屏\n      renderer.domElement.requestFullscreen();\n    } else {\n      //   退出全屏，使用document对象\n      document.exitFullscreen();\n    }\n  };\n\n  useEffect(() => {\n    // 初始化three场景\n    initThree();\n    window.addEventListener(\"dblclick\", fullScreen);\n    return () => {\n      window.removeEventListener(\"dblclick\", fullScreen);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (size?.width && size?.height) {\n      // 场景大小根据浏览器自适应\n      changeSize();\n    }\n  }, [size?.width, size?.height]);\n\n  return (\n    <div id=\"container\" style={{ width: \"100%\", height: \"100%\" }} ref={ref} />\n  );\n};\n\nexport default Chapter3_1;\n","import { useSize } from \"ahooks\";\nimport { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nlet scene: THREE.Scene | THREE.Object3D<THREE.Event>,\n  renderer: THREE.WebGLRenderer,\n  camera: THREE.PerspectiveCamera,\n  controls: OrbitControls\n\nconst Chapter3_2 = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const size = useSize(ref);\n\n  const initThree = () => {\n    /** --- 创建一个场景 --- */\n    scene = new THREE.Scene();\n\n    /** --- 创建一个网格模型 --- */\n    // 创建一个几何体\n    const geometry = new THREE.BufferGeometry();\n\n    const triangleVertices = [];\n    for (let index = 0; index < 300; index += 1) {\n      triangleVertices.push(Math.random() - 0.5);\n    }\n\n    const vertices = new Float32Array(triangleVertices);\n\n    geometry.setAttribute(\"position\", new THREE.BufferAttribute(vertices, 3));\n\n    // 创建一个材质对象\n    const material = new THREE.MeshLambertMaterial({ color: 0x607d8b, wireframe: true });\n    // 创建一个网格模型对象\n    const mesh = new THREE.Mesh(geometry, material);\n    // 将网格模型对象添加到场景中\n    scene.add(mesh);\n\n    /** --- 设置光源 --- */\n    // 点光源\n    const point = new THREE.PointLight(0xffffff);\n    point.position.set(4, 2, 3);\n    scene.add(point); //点光源添加到场景中\n    //环境光\n    const ambient = new THREE.AmbientLight(0x444444);\n    scene.add(ambient);\n\n    /** --- 相机设置 --- */\n    // 创建相机\n    camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    // 设置相机位置\n    camera.position.set(0, 0, 5);\n    //设置相机方向(指向的场景对象)\n    camera.lookAt(scene.position);\n\n    // 创建渲染器\n    renderer = new THREE.WebGLRenderer();\n    renderer.setClearColor(0xb9d3ff, 1); //设置背景颜色\n    renderer.render(scene, camera);\n    ref.current?.appendChild(renderer.domElement); //body元素中插入canvas对象\n\n    /** ---创建轨道控制器--- */\n    controls = new OrbitControls(camera, renderer.domElement);\n\n    render();\n  };\n\n  const changeSize = () => {\n    /** --- 相机设置 --- */\n    const width = Number(size?.width); //窗口宽度\n    const height = Number(size?.height); //窗口高度\n\n    // 更新摄像头\n    camera.aspect = width / height;\n    // 更新摄像机的投影矩阵\n    camera.updateProjectionMatrix();\n\n    //  更新渲染区域尺寸\n    renderer.setSize(width, height);\n    //  设置渲染器的像素比\n    renderer.setPixelRatio(window.devicePixelRatio);\n  };\n\n  function render() {\n    controls.update();\n    renderer.render(scene, camera);\n    // 渲染下一帧的时候就会调用render函数\n    requestAnimationFrame(render);\n  }\n\n  const fullScreen = () => {\n    const fullScreenElement = document.fullscreenElement;\n    if (!fullScreenElement) {\n      // 让画布对象全屏\n      renderer.domElement.requestFullscreen();\n    } else {\n      //   退出全屏，使用document对象\n      document.exitFullscreen();\n    }\n  };\n\n  useEffect(() => {\n    // 初始化three场景\n    initThree();\n    window.addEventListener(\"dblclick\", fullScreen);\n    return () => {\n      window.removeEventListener(\"dblclick\", fullScreen);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (size?.width && size?.height) {\n      // 场景大小根据浏览器自适应\n      changeSize();\n    }\n  }, [size?.width, size?.height]);\n\n  return (\n    <div id=\"container\" style={{ width: \"100%\", height: \"100%\" }} ref={ref} />\n  );\n};\n\nexport default Chapter3_2;\n","/*\n * @Title: three.js加载纹理\n * @Author: huangjitao\n * @Date: 2022-09-14 17:27:20\n * @Description: 深入研究three.js中的geometry，自定义一个矩形\n */\nimport { useSize } from \"ahooks\";\nimport { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nlet scene: THREE.Scene | THREE.Object3D<THREE.Event>,\n  renderer: THREE.WebGLRenderer,\n  camera: THREE.PerspectiveCamera,\n  controls: OrbitControls,\n  axesHelper;\n\nconst Chapter4_1 = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const size = useSize(ref);\n  const [loadTip, setLoadTip] = useState<string>(\"\");\n\n  const initThree = () => {\n    /** --- 创建一个场景 --- */\n    scene = new THREE.Scene();\n\n    /** --- 创建一个网格模型 --- */\n    // 创建一个几何体\n    const geometry = new THREE.BoxGeometry();\n\n    const loadingManager = new THREE.LoadingManager();\n    loadingManager.onStart = (url, itemsLoaded, itemsTotal) => {\n      setLoadTip(\n        `开始加载资源: ${url}.\\nLoaded ${itemsLoaded} of ${itemsTotal} files.`\n      );\n    };\n    loadingManager.onProgress = (url, itemsLoaded, itemsTotal) => {\n      setLoadTip(\n        `加载资源中: ${url}.\\nLoaded ${itemsLoaded} of ${itemsTotal} files.`\n      );\n    };\n    loadingManager.onLoad = () => {\n      setLoadTip(\"加载资源完成\");\n    };\n    loadingManager.onError = (url) => {\n      setLoadTip(`加载资源出错 ${url}`);\n    };\n\n    const textureLoader = new THREE.TextureLoader(loadingManager);\n    const colorTexture = textureLoader.load(\"/textures/door/color.jpg\");\n    const alphaTexture = textureLoader.load(\"/textures/door/alpha.jpg\");\n    const heightTexture = textureLoader.load(\"/textures/door/height.jpg\");\n    const normalTexture = textureLoader.load(\"/textures/door/normal.jpg\");\n    const alphaTexture1 = textureLoader.load(\"/textures/door/alpha.jpg\");\n    const heightTexture1 = textureLoader.load(\"/textures/door/height.jpg\");\n    const normalTexture1 = textureLoader.load(\"/textures/door/normal.jpg\");\n    const alphaTexture2 = textureLoader.load(\"/textures/door/alpha.jpg\");\n    const heightTexture2 = textureLoader.load(\"/textures/door/height.jpg\");\n    const normalTexture2 = textureLoader.load(\"/textures/door/normal.jpg\");\n    const alphaTexture3 = textureLoader.load(\"/textures/door/alpha.jpg\");\n    const heightTexture3 = textureLoader.load(\"/textures/door/height.jpg\");\n    const normalTexture3 = textureLoader.load(\"/textures/door/normal.jpg\");\n\n    // 创建一个材质对象\n    const material = new THREE.MeshBasicMaterial({ map: colorTexture });\n    // 创建一个网格模型对象\n    const mesh = new THREE.Mesh(geometry, material);\n    // 将网格模型对象添加到场景中\n    scene.add(mesh);\n\n    /** --- 设置光源 --- */\n    // 点光源\n    const point = new THREE.PointLight(0xffffff);\n    point.position.set(4, 2, 3);\n    scene.add(point); //点光源添加到场景中\n    //环境光\n    const ambient = new THREE.AmbientLight(0x444444);\n    scene.add(ambient);\n\n    /** ---添加坐标辅助--- */\n    axesHelper = new THREE.AxesHelper(5);\n    scene.add(axesHelper);\n\n    /** --- 相机设置 --- */\n    // 创建相机\n    camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    // 设置相机位置\n    camera.position.set(0, 0, 5);\n    //设置相机方向(指向的场景对象)\n    camera.lookAt(scene.position);\n\n    // 创建渲染器\n    renderer = new THREE.WebGLRenderer();\n    renderer.setClearColor(0xb9d3ff, 1); //设置背景颜色\n    renderer.render(scene, camera);\n    ref.current?.appendChild(renderer.domElement); //body元素中插入canvas对象\n\n    /** ---创建轨道控制器--- */\n    controls = new OrbitControls(camera, renderer.domElement);\n\n    render();\n  };\n\n  const changeSize = () => {\n    /** --- 相机设置 --- */\n    const width = Number(size?.width); //窗口宽度\n    const height = Number(size?.height); //窗口高度\n\n    // 更新摄像头\n    camera.aspect = width / height;\n    // 更新摄像机的投影矩阵\n    camera.updateProjectionMatrix();\n\n    //  更新渲染区域尺寸\n    renderer.setSize(width, height);\n    //  设置渲染器的像素比\n    renderer.setPixelRatio(window.devicePixelRatio);\n  };\n\n  function render() {\n    controls.update();\n    renderer.render(scene, camera);\n    // 渲染下一帧的时候就会调用render函数\n    requestAnimationFrame(render);\n  }\n\n  const fullScreen = () => {\n    const fullScreenElement = document.fullscreenElement;\n    if (!fullScreenElement) {\n      // 让画布对象全屏\n      renderer.domElement.requestFullscreen();\n    } else {\n      //   退出全屏，使用document对象\n      document.exitFullscreen();\n    }\n  };\n\n  useEffect(() => {\n    // 初始化three场景\n    initThree();\n    window.addEventListener(\"dblclick\", fullScreen);\n    return () => {\n      window.removeEventListener(\"dblclick\", fullScreen);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (size?.width && size?.height) {\n      // 场景大小根据浏览器自适应\n      changeSize();\n    }\n  }, [size?.width, size?.height]);\n\n  return (\n    <div id=\"container\" style={{ width: \"100%\", height: \"100%\" }} ref={ref}>\n      <div className=\"load-tip\" id=\"tip\">{loadTip}</div>\n    </div>\n  );\n};\n\nexport default Chapter4_1;\n","/*\n * @Title: 纹理变换\n * @Author: huangjitao\n * @Date: 2022-09-26 10:04:43\n * @Description: description of this file\n */\n\nimport { useSize } from \"ahooks\";\nimport { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { Vector2 } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nlet scene: THREE.Scene | THREE.Object3D<THREE.Event>,\n  renderer: THREE.WebGLRenderer,\n  camera: THREE.PerspectiveCamera,\n  controls: OrbitControls,\n  axesHelper;\n\nconst Chapter4_2 = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const size = useSize(ref);\n  const [loadTip, setLoadTip] = useState<string>(\"\");\n\n  const initThree = () => {\n    /** --- 创建一个场景 --- */\n    scene = new THREE.Scene();\n\n    /** --- 创建一个网格模型 --- */\n    // 创建一个几何体\n    const geometry = new THREE.BoxGeometry();\n\n    const loadingManager = new THREE.LoadingManager();\n    loadingManager.onStart = (url, itemsLoaded, itemsTotal) => {\n      setLoadTip(\n        `开始加载资源: ${url}.\\nLoaded ${itemsLoaded} of ${itemsTotal} files.`\n      );\n    };\n    loadingManager.onProgress = (url, itemsLoaded, itemsTotal) => {\n      setLoadTip(\n        `加载资源中: ${url}.\\nLoaded ${itemsLoaded} of ${itemsTotal} files.`\n      );\n    };\n    loadingManager.onLoad = () => {\n      setLoadTip(\"加载资源完成\");\n    };\n    loadingManager.onError = (url) => {\n      setLoadTip(`加载资源出错 ${url}`);\n    };\n\n    const textureLoader = new THREE.TextureLoader(loadingManager);\n    const colorTexture = textureLoader.load(\"/textures/door/color.jpg\");\n\n    // 纹理变换\n    colorTexture.repeat.x = 2;\n    colorTexture.repeat.x = 3;\n    // 以上两个设置并没有repeat，而是边缘的像素被拉伸了，需要再设置属性wrapS和wrapT\n    colorTexture.wrapS = THREE.RepeatWrapping;\n    colorTexture.wrapT = THREE.RepeatWrapping;\n    // colorTexture.wrapS = THREE.MirroredRepeatWrapping;\n    // colorTexture.wrapT = THREE.MirroredRepeatWrapping;\n    // 设置偏移属性\n    colorTexture.offset.x = 0.5\n    colorTexture.offset.y = 0\n    // 设置旋转属性\n    colorTexture.rotation = Math.PI / 4\n    colorTexture.center = new Vector2(0.5, 0.5)\n\n    // 创建一个材质对象\n    const material = new THREE.MeshBasicMaterial({ map: colorTexture });\n    // 创建一个网格模型对象\n    const mesh = new THREE.Mesh(geometry, material);\n    // 将网格模型对象添加到场景中\n    scene.add(mesh);\n\n    /** --- 设置光源 --- */\n    // 点光源\n    const point = new THREE.PointLight(0xffffff);\n    point.position.set(4, 2, 3);\n    scene.add(point); //点光源添加到场景中\n    //环境光\n    const ambient = new THREE.AmbientLight(0x444444);\n    scene.add(ambient);\n\n    /** ---添加坐标辅助--- */\n    axesHelper = new THREE.AxesHelper(5);\n    scene.add(axesHelper);\n\n    /** --- 相机设置 --- */\n    // 创建相机\n    camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    // 设置相机位置\n    camera.position.set(0, 0, 5);\n    //设置相机方向(指向的场景对象)\n    camera.lookAt(scene.position);\n\n    // 创建渲染器\n    renderer = new THREE.WebGLRenderer();\n    renderer.setClearColor(0xb9d3ff, 1); //设置背景颜色\n    renderer.render(scene, camera);\n    ref.current?.appendChild(renderer.domElement); //body元素中插入canvas对象\n\n    /** ---创建轨道控制器--- */\n    controls = new OrbitControls(camera, renderer.domElement);\n\n    render();\n  };\n\n  const changeSize = () => {\n    /** --- 相机设置 --- */\n    const width = Number(size?.width); //窗口宽度\n    const height = Number(size?.height); //窗口高度\n\n    // 更新摄像头\n    camera.aspect = width / height;\n    // 更新摄像机的投影矩阵\n    camera.updateProjectionMatrix();\n\n    //  更新渲染区域尺寸\n    renderer.setSize(width, height);\n    //  设置渲染器的像素比\n    renderer.setPixelRatio(window.devicePixelRatio);\n  };\n\n  function render() {\n    controls.update();\n    renderer.render(scene, camera);\n    // 渲染下一帧的时候就会调用render函数\n    requestAnimationFrame(render);\n  }\n\n  const fullScreen = () => {\n    const fullScreenElement = document.fullscreenElement;\n    if (!fullScreenElement) {\n      // 让画布对象全屏\n      renderer.domElement.requestFullscreen();\n    } else {\n      //   退出全屏，使用document对象\n      document.exitFullscreen();\n    }\n  };\n\n  useEffect(() => {\n    // 初始化three场景\n    initThree();\n    window.addEventListener(\"dblclick\", fullScreen);\n    return () => {\n      window.removeEventListener(\"dblclick\", fullScreen);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (size?.width && size?.height) {\n      // 场景大小根据浏览器自适应\n      changeSize();\n    }\n  }, [size?.width, size?.height]);\n\n  return (\n    <div id=\"container\" style={{ width: \"100%\", height: \"100%\" }} ref={ref}>\n      <div className=\"load-tip\" id=\"tip\">\n        {loadTip}\n      </div>\n    </div>\n  );\n};\n\nexport default Chapter4_2;\n\n","/*\n * @Title: 纹理显示算法\n * @Author: huangjitao\n * @Date: 2022-09-26 15:39:32\n * @Description: description of this file\n */\n\nimport { useSize } from \"ahooks\";\nimport { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { Vector2 } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nlet scene: THREE.Scene | THREE.Object3D<THREE.Event>,\n  renderer: THREE.WebGLRenderer,\n  camera: THREE.PerspectiveCamera,\n  controls: OrbitControls,\n  axesHelper;\n\nconst Chapter4_3 = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const size = useSize(ref);\n  const [loadTip, setLoadTip] = useState<string>(\"\");\n\n  const initThree = () => {\n    /** --- 创建一个场景 --- */\n    scene = new THREE.Scene();\n\n    /** --- 创建一个网格模型 --- */\n    // 创建一个几何体\n    const geometry = new THREE.BoxGeometry();\n\n    const loadingManager = new THREE.LoadingManager();\n    loadingManager.onStart = (url, itemsLoaded, itemsTotal) => {\n      setLoadTip(\n        `开始加载资源: ${url}.\\nLoaded ${itemsLoaded} of ${itemsTotal} files.`\n      );\n    };\n    loadingManager.onProgress = (url, itemsLoaded, itemsTotal) => {\n      setLoadTip(\n        `加载资源中: ${url}.\\nLoaded ${itemsLoaded} of ${itemsTotal} files.`\n      );\n    };\n    loadingManager.onLoad = () => {\n      setLoadTip(\"加载资源完成\");\n    };\n    loadingManager.onError = (url) => {\n      setLoadTip(`加载资源出错 ${url}`);\n    };\n\n    const textureLoader = new THREE.TextureLoader(loadingManager);\n    const texture = textureLoader.load(\"/textures/minecraft.png\");\n\n    texture.minFilter = THREE.NearestFilter;\n    texture.magFilter = THREE.NearestFilter;\n\n    // 创建一个材质对象\n    const material = new THREE.MeshBasicMaterial({ map: texture });\n    // 创建一个网格模型对象\n    const mesh = new THREE.Mesh(geometry, material);\n    // 将网格模型对象添加到场景中\n    scene.add(mesh);\n\n    /** --- 设置光源 --- */\n    // 点光源\n    const point = new THREE.PointLight(0xffffff);\n    point.position.set(4, 2, 3);\n    scene.add(point); //点光源添加到场景中\n    //环境光\n    const ambient = new THREE.AmbientLight(0x444444);\n    scene.add(ambient);\n\n    /** ---添加坐标辅助--- */\n    axesHelper = new THREE.AxesHelper(5);\n    scene.add(axesHelper);\n\n    /** --- 相机设置 --- */\n    // 创建相机\n    camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    // 设置相机位置\n    camera.position.set(0, 0, 5);\n    //设置相机方向(指向的场景对象)\n    camera.lookAt(scene.position);\n\n    // 创建渲染器\n    renderer = new THREE.WebGLRenderer();\n    renderer.setClearColor(0xb9d3ff, 1); //设置背景颜色\n    renderer.render(scene, camera);\n    ref.current?.appendChild(renderer.domElement); //body元素中插入canvas对象\n\n    /** ---创建轨道控制器--- */\n    controls = new OrbitControls(camera, renderer.domElement);\n\n    render();\n  };\n\n  const changeSize = () => {\n    /** --- 相机设置 --- */\n    const width = Number(size?.width); //窗口宽度\n    const height = Number(size?.height); //窗口高度\n\n    // 更新摄像头\n    camera.aspect = width / height;\n    // 更新摄像机的投影矩阵\n    camera.updateProjectionMatrix();\n\n    //  更新渲染区域尺寸\n    renderer.setSize(width, height);\n    //  设置渲染器的像素比\n    renderer.setPixelRatio(window.devicePixelRatio);\n  };\n\n  function render() {\n    controls.update();\n    renderer.render(scene, camera);\n    // 渲染下一帧的时候就会调用render函数\n    requestAnimationFrame(render);\n  }\n\n  const fullScreen = () => {\n    const fullScreenElement = document.fullscreenElement;\n    if (!fullScreenElement) {\n      // 让画布对象全屏\n      renderer.domElement.requestFullscreen();\n    } else {\n      //   退出全屏，使用document对象\n      document.exitFullscreen();\n    }\n  };\n\n  useEffect(() => {\n    // 初始化three场景\n    initThree();\n    window.addEventListener(\"dblclick\", fullScreen);\n    return () => {\n      window.removeEventListener(\"dblclick\", fullScreen);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (size?.width && size?.height) {\n      // 场景大小根据浏览器自适应\n      changeSize();\n    }\n  }, [size?.width, size?.height]);\n\n  return (\n    <div id=\"container\" style={{ width: \"100%\", height: \"100%\" }} ref={ref}>\n      <div className=\"load-tip\" id=\"tip\">\n        {loadTip}\n      </div>\n    </div>\n  );\n};\n\nexport default Chapter4_3;\n","/*\n * @Title: 基础材质的参数\n * @Author: huangjitao\n * @Date: 2022-09-29 10:38:09\n * @Description: 透明度纹理、环境遮挡贴图\n */\n\nimport { useSize } from \"ahooks\";\nimport GUI from \"lil-gui\";\nimport { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nlet scene: THREE.Scene | THREE.Object3D<THREE.Event>,\n  renderer: THREE.WebGLRenderer,\n  camera: THREE.PerspectiveCamera,\n  controls: OrbitControls,\n  axesHelper;\n\nconst Chapter4_4 = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const size = useSize(ref);\n  const [loadTip, setLoadTip] = useState<string>(\"\");\n\n  const initThree = () => {\n    /** --- 创建一个场景 --- */\n    scene = new THREE.Scene();\n\n    /** --- 创建一个网格模型 --- */\n    // 创建一个几何体\n    const geometry = new THREE.BoxGeometry();\n\n    const loadingManager = new THREE.LoadingManager();\n    loadingManager.onStart = (url, itemsLoaded, itemsTotal) => {\n      setLoadTip(\n        `开始加载资源: ${url}.\\nLoaded ${itemsLoaded} of ${itemsTotal} files.`\n      );\n    };\n    loadingManager.onProgress = (url, itemsLoaded, itemsTotal) => {\n      setLoadTip(\n        `加载资源中: ${url}.\\nLoaded ${itemsLoaded} of ${itemsTotal} files.`\n      );\n    };\n    loadingManager.onLoad = () => {\n      setLoadTip(\"加载资源完成\");\n    };\n    loadingManager.onError = (url) => {\n      setLoadTip(`加载资源出错 ${url}`);\n    };\n\n    const textureLoader = new THREE.TextureLoader(loadingManager);\n    const colorTexture = textureLoader.load(\"/textures/door/color.jpg\");\n    const AlphaTexture = textureLoader.load(\"/textures/door/alpha.jpg\");\n    const AoTexture = textureLoader.load(\"/textures/door/ambientOcclusion.jpg\");\n\n    const material = new THREE.MeshBasicMaterial({\n      color: \"#ffff00\",\n      map: colorTexture,\n      alphaMap: AlphaTexture,\n      transparent: true,\n      opacity: 0.5,\n      aoMap: AoTexture,\n      aoMapIntensity: 0.5,\n      wireframe: false,\n      side: THREE.DoubleSide,\n    });\n    // aoMap需要第二组UV。\n    geometry.setAttribute(\n      \"uv2\",\n      new THREE.BufferAttribute(geometry.attributes.uv.array, 2)\n    );\n    // 创建一个网格模型对象\n    const mesh = new THREE.Mesh(geometry, material);\n    // 将网格模型对象添加到场景中\n    scene.add(mesh);\n\n    /** ---创建图形界面工具--- */\n    const panel = new GUI();\n    panel\n      .add(material, \"alphaMap\", { \"fibers\": AlphaTexture, \"none\": null })\n      .name(\"透明贴图\")\n      .onChange((value: any) => {\n        material.needsUpdate = true;\n      })\n    panel\n      .add(material, \"transparent\")\n      .name(\"是否透明\")\n      .onChange(() => console.log(`当前物体是否显示：${mesh.visible}`));\n    panel\n      .add(material, \"opacity\")\n      .min(0)\n      .max(1)\n      .step(0.01)\n      .name(\"设置透明度\");\n    panel\n      .add(material, \"aoMap\", { \"fibers\": AoTexture, \"none\": null })\n      .name(\"环境遮挡贴图\")\n      .onChange((value: any) => {\n        material.needsUpdate = true;\n      })\n    panel\n      .add(material, \"aoMapIntensity\")\n      .min(0)\n      .max(1)\n      .step(0.01)\n      .name(\"环境遮挡强度\");\n    panel\n      .add(material, \"side\", {\n        'THREE.FrontSide': THREE.FrontSide,\n        'THREE.BackSide': THREE.BackSide,\n        'THREE.DoubleSide': THREE.DoubleSide\n      })\n      .name('渲染面')\n      .onChange((value: any) => {\n        material.needsUpdate = true;\n      })\n    panel\n      .add(material, \"wireframe\")\n      .name(\"是否线框\")\n\n    /** --- 设置光源 --- */\n    // 点光源\n    const point = new THREE.PointLight(0xffffff);\n    point.position.set(4, 2, 3);\n    scene.add(point); //点光源添加到场景中\n    //环境光\n    const ambient = new THREE.AmbientLight(0x444444);\n    scene.add(ambient);\n\n    /** ---添加坐标辅助--- */\n    axesHelper = new THREE.AxesHelper(5);\n    scene.add(axesHelper);\n\n    /** --- 相机设置 --- */\n    // 创建相机\n    camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    // 设置相机位置\n    camera.position.set(0, 0, 5);\n    //设置相机方向(指向的场景对象)\n    camera.lookAt(scene.position);\n\n    // 创建渲染器\n    renderer = new THREE.WebGLRenderer();\n    renderer.setClearColor(0xb9d3ff, 1); //设置背景颜色\n    renderer.render(scene, camera);\n    ref.current?.appendChild(renderer.domElement); //body元素中插入canvas对象\n\n    /** ---创建轨道控制器--- */\n    controls = new OrbitControls(camera, renderer.domElement);\n\n    render();\n  };\n\n  const changeSize = () => {\n    /** --- 相机设置 --- */\n    const width = Number(size?.width); //窗口宽度\n    const height = Number(size?.height); //窗口高度\n\n    // 更新摄像头\n    camera.aspect = width / height;\n    // 更新摄像机的投影矩阵\n    camera.updateProjectionMatrix();\n\n    //  更新渲染区域尺寸\n    renderer.setSize(width, height);\n    //  设置渲染器的像素比\n    renderer.setPixelRatio(window.devicePixelRatio);\n  };\n\n  function render() {\n    controls.update();\n    renderer.render(scene, camera);\n    // 渲染下一帧的时候就会调用render函数\n    requestAnimationFrame(render);\n  }\n\n  const fullScreen = () => {\n    const fullScreenElement = document.fullscreenElement;\n    if (!fullScreenElement) {\n      // 让画布对象全屏\n      renderer.domElement.requestFullscreen();\n    } else {\n      //   退出全屏，使用document对象\n      document.exitFullscreen();\n    }\n  };\n\n  useEffect(() => {\n    // 初始化three场景\n    initThree();\n    window.addEventListener(\"dblclick\", fullScreen);\n    return () => {\n      window.removeEventListener(\"dblclick\", fullScreen);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (size?.width && size?.height) {\n      // 场景大小根据浏览器自适应\n      changeSize();\n    }\n  }, [size?.width, size?.height]);\n\n  return (\n    <div id=\"container\" style={{ width: \"100%\", height: \"100%\" }} ref={ref}>\n      <div className=\"load-tip\" id=\"tip\">\n        {loadTip}\n      </div>\n    </div>\n  );\n};\n\nexport default Chapter4_4;\n","/*\n * @Title: 标准材质的参数\n * @Author: huangjitao\n * @Date: 2022-09-29 10:38:09\n * @Description: 透明度纹理、环境遮挡贴图\n */\n\nimport { useSize } from \"ahooks\";\nimport GUI from \"lil-gui\";\nimport { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nlet scene: THREE.Scene | THREE.Object3D<THREE.Event>,\n  renderer: THREE.WebGLRenderer,\n  camera: THREE.PerspectiveCamera,\n  controls: OrbitControls,\n  axesHelper;\n\nconst Chapter4_5 = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const size = useSize(ref);\n  const [loadTip, setLoadTip] = useState<string>(\"\");\n\n  const initThree = () => {\n    /** --- 创建一个场景 --- */\n    scene = new THREE.Scene();\n\n    /** --- 创建一个网格模型 --- */\n    // 创建一个几何体\n    const geometry = new THREE.BoxGeometry(1, 1, 1, 100, 100, 100);\n\n    const loadingManager = new THREE.LoadingManager();\n    loadingManager.onStart = (url, itemsLoaded, itemsTotal) => {\n      setLoadTip(\n        `开始加载资源: ${url}.\\nLoaded ${itemsLoaded} of ${itemsTotal} files.`\n      );\n    };\n    loadingManager.onProgress = (url, itemsLoaded, itemsTotal) => {\n      setLoadTip(\n        `加载资源中: ${url}.\\nLoaded ${itemsLoaded} of ${itemsTotal} files.`\n      );\n    };\n    loadingManager.onLoad = () => {\n      setLoadTip(\"加载资源完成\");\n    };\n    loadingManager.onError = (url) => {\n      setLoadTip(`加载资源出错 ${url}`);\n    };\n\n    const textureLoader = new THREE.TextureLoader(loadingManager);\n    const ColorTexture = textureLoader.load(\"/textures/door/color.jpg\");\n    const AlphaTexture = textureLoader.load(\"/textures/door/alpha.jpg\"); // 透明贴图\n    const AoTexture = textureLoader.load(\"/textures/door/ambientOcclusion.jpg\"); // 环境遮挡贴图\n    const DisplaceTexture = textureLoader.load(\"/textures/door/height.jpg\"); // 置换贴图\n    const RoughnessTexture = textureLoader.load(\"/textures/door/roughness.jpg\"); // 粗糙度贴图\n    const MetalnessTexture = textureLoader.load(\"/textures/door/metalness.jpg\"); // 金属度贴图\n    const NormalTexture = textureLoader.load(\"/textures/door/normal.jpg\");// 法线贴图\n\n    const material = new THREE.MeshStandardMaterial({\n      color: \"#ffff00\",\n      map: ColorTexture,\n      alphaMap: null,\n      transparent: true,\n      opacity: 1,\n      aoMap: null,\n      aoMapIntensity: 1,\n      displacementMap: DisplaceTexture,\n      displacementScale: 0.1,\n      roughnessMap: null,\n      roughness: 1,\n      metalnessMap: null,\n      metalness: 1,\n      normalMap: null,\n      side: THREE.DoubleSide,\n    });\n    // aoMap需要第二组UV。\n    geometry.setAttribute(\n      \"uv2\",\n      new THREE.BufferAttribute(geometry.attributes.uv.array, 2)\n    );\n    // 创建一个网格模型对象\n    const mesh = new THREE.Mesh(geometry, material);\n    // 将网格模型对象添加到场景中\n    scene.add(mesh);\n\n    /** ---创建图形界面工具--- */\n    const panel = new GUI();\n    const basicMaterialPanel = panel.addFolder(\"BasicMaterial\");\n    basicMaterialPanel\n      .add(material, \"alphaMap\", { hasMap: AlphaTexture, none: null })\n      .name(\"透明贴图\")\n      .onChange((value: any) => {\n        material.needsUpdate = true;\n      });\n    basicMaterialPanel\n      .add(material, \"transparent\")\n      .name(\"是否透明\")\n      .onChange(() => console.log(`当前物体是否显示：${mesh.visible}`));\n    basicMaterialPanel\n      .add(material, \"opacity\")\n      .min(0)\n      .max(1)\n      .step(0.01)\n      .name(\"设置透明度\");\n    basicMaterialPanel\n      .add(material, \"aoMap\", { hasMap: AoTexture, none: null })\n      .name(\"环境遮挡贴图\")\n      .onChange((value: any) => {\n        material.needsUpdate = true;\n      });\n    basicMaterialPanel\n      .add(material, \"aoMapIntensity\")\n      .min(0)\n      .max(1)\n      .step(0.01)\n      .name(\"环境遮挡强度\");\n    basicMaterialPanel\n      .add(material, \"side\", {\n        \"THREE.FrontSide\": THREE.FrontSide,\n        \"THREE.BackSide\": THREE.BackSide,\n        \"THREE.DoubleSide\": THREE.DoubleSide,\n      })\n      .name(\"渲染面\")\n      .onChange((value: any) => {\n        material.needsUpdate = true;\n      });\n\n    const standardMaterialPanel = panel.addFolder(\"StandardMaterial\");\n    standardMaterialPanel\n      .add(material, \"displacementMap\", { hasMap: DisplaceTexture, none: null })\n      .name(\"置换贴图\")\n      .onChange((value: any) => {\n        material.needsUpdate = true;\n      });\n    standardMaterialPanel\n      .add(material, \"displacementScale\")\n      .min(0)\n      .max(0.1)\n      .step(0.0001)\n      .name(\"置换贴图顶点细分度\")\n\n    standardMaterialPanel\n      .add(material, \"roughnessMap\", { hasMap: RoughnessTexture, none: null })\n      .name(\"粗糙度贴图\")\n      .onChange((value: any) => {\n        material.needsUpdate = true;\n      });\n    standardMaterialPanel\n      .add(material, \"roughness\")\n      .min(0)\n      .max(1)\n      .step(0.01)\n      .name(\"粗糙程度\")\n\n    standardMaterialPanel\n      .add(material, \"metalnessMap\", { hasMap: MetalnessTexture, none: null })\n      .name(\"金属度贴图\")\n      .onChange((value: any) => {\n        material.needsUpdate = true;\n      });\n    standardMaterialPanel\n      .add(material, \"metalness\")\n      .min(0)\n      .max(1)\n      .step(0.01)\n      .name(\"金属相似度\")\n    standardMaterialPanel\n      .add(material, \"normalMap\", { hasMap: NormalTexture, none: null })\n      .name(\"法线贴图\")\n      .onChange((value: any) => {\n        material.needsUpdate = true;\n      });\n\n    /** --- 设置光源 --- */\n    // // 点光源\n    // const point = new THREE.PointLight(0xffffff);\n    // point.position.set(0, 5, 10);\n    // scene.add(point); //点光源添加到场景中\n    // 环境光\n    const ambient = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambient);\n    // 直线光\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\n    directionalLight.position.set(10, 10, 10);\n    scene.add(directionalLight);\n\n    /** ---添加坐标辅助--- */\n    axesHelper = new THREE.AxesHelper(5);\n    scene.add(axesHelper);\n\n    /** --- 相机设置 --- */\n    // 创建相机\n    camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    // 设置相机位置\n    camera.position.set(0, 0, 5);\n    //设置相机方向(指向的场景对象)\n    camera.lookAt(scene.position);\n\n    // 创建渲染器\n    renderer = new THREE.WebGLRenderer();\n    renderer.setClearColor(0xb9d3ff, 1); //设置背景颜色\n    renderer.render(scene, camera);\n    ref.current?.appendChild(renderer.domElement); //body元素中插入canvas对象\n\n    /** ---创建轨道控制器--- */\n    controls = new OrbitControls(camera, renderer.domElement);\n\n    render();\n  };\n\n  const changeSize = () => {\n    /** --- 相机设置 --- */\n    const width = Number(size?.width); //窗口宽度\n    const height = Number(size?.height); //窗口高度\n\n    // 更新摄像头\n    camera.aspect = width / height;\n    // 更新摄像机的投影矩阵\n    camera.updateProjectionMatrix();\n\n    //  更新渲染区域尺寸\n    renderer.setSize(width, height);\n    //  设置渲染器的像素比\n    renderer.setPixelRatio(window.devicePixelRatio);\n  };\n\n  function render() {\n    controls.update();\n    renderer.render(scene, camera);\n    // 渲染下一帧的时候就会调用render函数\n    requestAnimationFrame(render);\n  }\n\n  const fullScreen = () => {\n    const fullScreenElement = document.fullscreenElement;\n    if (!fullScreenElement) {\n      // 让画布对象全屏\n      renderer.domElement.requestFullscreen();\n    } else {\n      //   退出全屏，使用document对象\n      document.exitFullscreen();\n    }\n  };\n\n  useEffect(() => {\n    // 初始化three场景\n    initThree();\n    window.addEventListener(\"dblclick\", fullScreen);\n    return () => {\n      window.removeEventListener(\"dblclick\", fullScreen);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (size?.width && size?.height) {\n      // 场景大小根据浏览器自适应\n      changeSize();\n    }\n  }, [size?.width, size?.height]);\n\n  return (\n    <div id=\"container\" style={{ width: \"100%\", height: \"100%\" }} ref={ref}>\n      <div className=\"load-tip\" id=\"tip\">\n        {loadTip}\n      </div>\n    </div>\n  );\n};\n\nexport default Chapter4_5;\n","import React from \"react\";\n\nimport { useSize } from \"ahooks\";\nimport GUI from \"lil-gui\";\nimport { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { RGBELoader } from \"three/examples/jsm/loaders/RGBELoader\";\n\nlet scene: THREE.Scene,\n  renderer: THREE.WebGLRenderer,\n  camera: THREE.PerspectiveCamera,\n  controls: OrbitControls,\n  axesHelper;\n\nconst textureType = {\n  envMap: 3\n}\n\nconst Chapter4_6 = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const size = useSize(ref);\n\n  const initThree = () => {\n    /** --- 创建一个场景 --- */\n    scene = new THREE.Scene();\n\n    // 设置cube纹理加载器,设置环境贴图\n    const cubeTextureLoader = new THREE.CubeTextureLoader();\n    const envMapTexture = cubeTextureLoader.load([\n      \"/textures/environmentMaps/1/px.jpg\",\n      \"/textures/environmentMaps/1/nx.jpg\",\n      \"/textures/environmentMaps/1/py.jpg\",\n      \"/textures/environmentMaps/1/ny.jpg\",\n      \"/textures/environmentMaps/1/pz.jpg\",\n      \"/textures/environmentMaps/1/nz.jpg\",\n    ]);\n\n    // 加载hdr环境图\n    let hdrTexture: any\n    const rgbeLoader = new RGBELoader();\n    rgbeLoader.loadAsync(\"/textures/hdr/002.hdr\").then((texture) => {\n      texture.mapping = THREE.EquirectangularReflectionMapping;\n      hdrTexture = texture\n    });\n\n    /** --- 创建一个网格模型 --- */\n    // 创建一个几何体\n    const geometry = new THREE.SphereGeometry(1,20, 20);\n\n    const material = new THREE.MeshStandardMaterial({\n      metalness: 0.7,\n      roughness: 0.1,\n      // envMap: envMapTexture,\n    });\n    // 创建一个网格模型对象\n    const mesh = new THREE.Mesh(geometry, material);\n    // 将网格模型对象添加到场景中\n    scene.add(mesh);\n\n    /** ---创建图形界面工具--- */\n    const panel = new GUI();\n    panel\n      .add(textureType, \"envMap\", { \"环境贴图\": 1, \"hdr\": 2, \"无\": 3 })\n      .name(\"贴图类型\")\n      .onChange((value: any) => {\n        if (value === 1) {\n          // 给场景添加背景\n          scene.background = envMapTexture;\n          // 给场景所有的物体添加默认的环境贴图\n          scene.environment = envMapTexture;\n        } else if (value === 2) {\n          scene.background = hdrTexture;\n          scene.environment = hdrTexture;\n        } else {\n          scene.background = null;\n          scene.environment = null;\n        }\n      });\n\n    /** --- 设置光源 --- */\n    // 环境光\n    const ambient = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambient);\n    // 直线光\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\n    directionalLight.position.set(10, 10, 10);\n    scene.add(directionalLight);\n\n    /** ---添加坐标辅助--- */\n    axesHelper = new THREE.AxesHelper(5);\n    scene.add(axesHelper);\n\n    /** --- 相机设置 --- */\n    // 创建相机\n    camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    // 设置相机位置\n    camera.position.set(0, 0, 10);\n    //设置相机方向(指向的场景对象)\n    camera.lookAt(scene.position);\n\n    // 创建渲染器\n    renderer = new THREE.WebGLRenderer();\n    renderer.setClearColor(0xb9d3ff, 1); //设置背景颜色\n    renderer.render(scene, camera);\n    ref.current?.appendChild(renderer.domElement); //body元素中插入canvas对象\n\n    /** ---创建轨道控制器--- */\n    controls = new OrbitControls(camera, renderer.domElement);\n\n    render();\n  };\n\n  const changeSize = () => {\n    /** --- 相机设置 --- */\n    const width = Number(size?.width); //窗口宽度\n    const height = Number(size?.height); //窗口高度\n\n    // 更新摄像头\n    camera.aspect = width / height;\n    // 更新摄像机的投影矩阵\n    camera.updateProjectionMatrix();\n\n    //  更新渲染区域尺寸\n    renderer.setSize(width, height);\n    //  设置渲染器的像素比\n    renderer.setPixelRatio(window.devicePixelRatio);\n  };\n\n  function render() {\n    controls.update();\n    renderer.render(scene, camera);\n    // 渲染下一帧的时候就会调用render函数\n    requestAnimationFrame(render);\n  }\n\n  const fullScreen = () => {\n    const fullScreenElement = document.fullscreenElement;\n    if (!fullScreenElement) {\n      // 让画布对象全屏\n      renderer.domElement.requestFullscreen();\n    } else {\n      //   退出全屏，使用document对象\n      document.exitFullscreen();\n    }\n  };\n\n  useEffect(() => {\n    // 初始化three场景\n    initThree();\n    window.addEventListener(\"dblclick\", fullScreen);\n    return () => {\n      window.removeEventListener(\"dblclick\", fullScreen);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (size?.width && size?.height) {\n      // 场景大小根据浏览器自适应\n      changeSize();\n    }\n  }, [size?.width, size?.height]);\n\n  return (\n    <div id=\"container\" style={{ width: \"100%\", height: \"100%\" }} ref={ref}>\n    </div>\n  );\n};\n\nexport default Chapter4_6;\n","import React from \"react\";\nimport { useSize } from \"ahooks\";\nimport GUI from \"lil-gui\";\nimport { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nlet scene: THREE.Scene,\n  renderer: THREE.WebGLRenderer,\n  camera: THREE.PerspectiveCamera,\n  controls: OrbitControls,\n  axesHelper;\n\nconst Chapter5_1 = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const size = useSize(ref);\n\n  const initThree = () => {\n    /** --- 创建一个场景 --- */\n    scene = new THREE.Scene();\n\n    /** --- 创建网格模型 --- */\n    // 创建一个几何体\n    const geometry = new THREE.SphereGeometry(1, 20, 20);\n    const material = new THREE.MeshStandardMaterial();\n    // 创建一个网格模型对象\n    const mesh = new THREE.Mesh(geometry, material);\n    // 设置物体投射阴影\n    mesh.castShadow = true;\n    // 将网格模型对象添加到场景中\n    scene.add(mesh);\n\n    // 创建平面\n    const planeGeometry = new THREE.PlaneGeometry(10, 10);\n    const plane = new THREE.Mesh(planeGeometry, material);\n    plane.position.set(0, -1, 0);\n    plane.rotation.x = -Math.PI / 2;\n    // 接收其它物体的阴影\n    plane.receiveShadow = true;\n    scene.add(plane);\n\n    /** --- 设置光源 --- */\n    // 环境光\n    const ambient = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambient);\n    // 直线光\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\n    directionalLight.position.set(5, 5, 5);\n    directionalLight.castShadow = true;\n\n    directionalLight.shadow.camera.near = 0.5;\n    directionalLight.shadow.camera.far = 500;\n    directionalLight.shadow.camera.top = 5;\n    directionalLight.shadow.camera.bottom = -5;\n    directionalLight.shadow.camera.left = -5;\n    directionalLight.shadow.camera.right = 5;\n\n    scene.add(directionalLight);\n\n    const panel = new GUI();\n    const directionalLightPanel = panel.addFolder(\"平行光\");\n    directionalLightPanel\n      .add(directionalLight.shadow.camera, \"near\")\n      .min(0)\n      .max(10)\n      .step(0.1)\n      .onChange(() => {\n        directionalLight.shadow.camera.updateProjectionMatrix();\n      });\n    directionalLightPanel\n      .add(directionalLight.shadow.camera, \"far\")\n      .min(0)\n      .max(1000)\n      .step(10)\n      .onChange(() => {\n        directionalLight.shadow.camera.updateProjectionMatrix();\n      });\n    directionalLightPanel\n      .add(directionalLight.shadow.camera, \"top\")\n      .min(0)\n      .max(10)\n      .step(1)\n      .onChange(() => {\n        directionalLight.shadow.camera.updateProjectionMatrix();\n      });\n    directionalLightPanel\n      .add(directionalLight.shadow.camera, \"bottom\")\n      .min(-10)\n      .max(0)\n      .step(1)\n      .onChange(() => {\n        directionalLight.shadow.camera.updateProjectionMatrix();\n      });\n    directionalLightPanel\n      .add(directionalLight.shadow.camera, \"left\")\n      .min(-10)\n      .max(0)\n      .step(1)\n      .onChange(() => {\n        directionalLight.shadow.camera.updateProjectionMatrix();\n      });\n    directionalLightPanel\n      .add(directionalLight.shadow.camera, \"right\")\n      .min(0)\n      .max(10)\n      .step(1)\n      .onChange(() => {\n        directionalLight.shadow.camera.updateProjectionMatrix();\n      });\n\n    /** ---添加坐标辅助--- */\n    axesHelper = new THREE.AxesHelper(5);\n    scene.add(axesHelper);\n\n    /** --- 相机设置 --- */\n    // 创建相机\n    camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    // 设置相机位置\n    camera.position.set(0, 0, 10);\n    //设置相机方向(指向的场景对象)\n    camera.lookAt(scene.position);\n\n    // 创建渲染器\n    renderer = new THREE.WebGLRenderer();\n    renderer.shadowMap.enabled = true;\n    renderer.setClearColor(0xb9d3ff, 1); //设置背景颜色\n    renderer.render(scene, camera);\n    ref.current?.appendChild(renderer.domElement); //body元素中插入canvas对象\n\n    /** ---创建轨道控制器--- */\n    controls = new OrbitControls(camera, renderer.domElement);\n\n    render();\n  };\n\n  const changeSize = () => {\n    /** --- 相机设置 --- */\n    const width = Number(size?.width); //窗口宽度\n    const height = Number(size?.height); //窗口高度\n\n    // 更新摄像头\n    camera.aspect = width / height;\n    // 更新摄像机的投影矩阵\n    camera.updateProjectionMatrix();\n\n    //  更新渲染区域尺寸\n    renderer.setSize(width, height);\n    //  设置渲染器的像素比\n    renderer.setPixelRatio(window.devicePixelRatio);\n  };\n\n  function render() {\n    controls.update();\n    renderer.render(scene, camera);\n    // 渲染下一帧的时候就会调用render函数\n    requestAnimationFrame(render);\n  }\n\n  const fullScreen = () => {\n    const fullScreenElement = document.fullscreenElement;\n    if (!fullScreenElement) {\n      // 让画布对象全屏\n      renderer.domElement.requestFullscreen();\n    } else {\n      //   退出全屏，使用document对象\n      document.exitFullscreen();\n    }\n  };\n\n  useEffect(() => {\n    // 初始化three场景\n    initThree();\n    window.addEventListener(\"dblclick\", fullScreen);\n    return () => {\n      window.removeEventListener(\"dblclick\", fullScreen);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (size?.width && size?.height) {\n      // 场景大小根据浏览器自适应\n      changeSize();\n    }\n  }, [size?.width, size?.height]);\n\n  return (\n    <div\n      id=\"container\"\n      style={{ width: \"100%\", height: \"100%\" }}\n      ref={ref}\n    ></div>\n  );\n};\n\nexport default Chapter5_1;\n","import React from \"react\";\nimport { useSize } from \"ahooks\";\nimport GUI from \"lil-gui\";\nimport { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nlet scene: THREE.Scene,\n  renderer: THREE.WebGLRenderer,\n  camera: THREE.PerspectiveCamera,\n  controls: OrbitControls,\n  axesHelper;\n\nconst Chapter5_2 = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const size = useSize(ref);\n\n  const initThree = () => {\n    /** --- 创建一个场景 --- */\n    scene = new THREE.Scene();\n\n    /** --- 创建网格模型 --- */\n    // 创建一个几何体\n    const geometry = new THREE.SphereGeometry(1, 20, 20);\n    const material = new THREE.MeshStandardMaterial();\n    // 创建一个网格模型对象\n    const mesh = new THREE.Mesh(geometry, material);\n    // 设置物体投射阴影\n    mesh.castShadow = true;\n    // 将网格模型对象添加到场景中\n    scene.add(mesh);\n\n    // 创建平面\n    const planeGeometry = new THREE.PlaneGeometry(50, 50);\n    const plane = new THREE.Mesh(planeGeometry, material);\n    plane.position.set(0, -1, 0);\n    plane.rotation.x = -Math.PI / 2;\n    // 接收其它物体的阴影\n    plane.receiveShadow = true;\n    scene.add(plane);\n\n    /** --- 设置光源 --- */\n    // 环境光\n    const ambient = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambient);\n    // 直线光\n    const spotLight = new THREE.SpotLight(0xffffff, 1);\n    spotLight.position.set(5, 5, 5);\n    spotLight.castShadow = true;\n    spotLight.intensity = 2;\n\n    // 设置阴影贴图模糊度\n    spotLight.shadow.radius = 20;\n    // 设置阴影贴图的分辨率\n    spotLight.shadow.mapSize.set(512, 512);\n    spotLight.target = mesh;\n    spotLight.angle = Math.PI / 6;\n    spotLight.distance = 0;\n    spotLight.penumbra = 0;\n    spotLight.decay = 0;\n\n    scene.add(spotLight);\n\n    const panel = new GUI();\n    const spotLightPanel = panel.addFolder(\"平行光\");\n    spotLightPanel.add(mesh.position, \"x\").min(-5).max(5).step(0.1);\n    spotLightPanel\n      .add(spotLight, \"angle\")\n      .min(0)\n      .max(Math.PI / 2)\n      .step(0.01);\n    spotLightPanel.add(spotLight, \"distance\").min(0).max(10).step(0.01);\n    spotLightPanel.add(spotLight, \"penumbra\").min(0).max(1).step(0.01);\n    spotLightPanel.add(spotLight, \"decay\").min(0).max(5).step(0.01);\n\n    /** ---添加坐标辅助--- */\n    axesHelper = new THREE.AxesHelper(5);\n    scene.add(axesHelper);\n\n    /** --- 相机设置 --- */\n    // 创建相机\n    camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    // 设置相机位置\n    camera.position.set(0, 0, 10);\n    //设置相机方向(指向的场景对象)\n    camera.lookAt(scene.position);\n\n    // 创建渲染器\n    renderer = new THREE.WebGLRenderer();\n    renderer.shadowMap.enabled = true;\n    renderer.physicallyCorrectLights = true;\n    renderer.setClearColor(0xb9d3ff, 1); //设置背景颜色\n    renderer.render(scene, camera);\n    ref.current?.appendChild(renderer.domElement); //body元素中插入canvas对象\n\n    /** ---创建轨道控制器--- */\n    controls = new OrbitControls(camera, renderer.domElement);\n\n    render();\n  };\n\n  const changeSize = () => {\n    /** --- 相机设置 --- */\n    const width = Number(size?.width); //窗口宽度\n    const height = Number(size?.height); //窗口高度\n\n    // 更新摄像头\n    camera.aspect = width / height;\n    // 更新摄像机的投影矩阵\n    camera.updateProjectionMatrix();\n\n    //  更新渲染区域尺寸\n    renderer.setSize(width, height);\n    //  设置渲染器的像素比\n    renderer.setPixelRatio(window.devicePixelRatio);\n  };\n\n  function render() {\n    controls.update();\n    renderer.render(scene, camera);\n    // 渲染下一帧的时候就会调用render函数\n    requestAnimationFrame(render);\n  }\n\n  const fullScreen = () => {\n    const fullScreenElement = document.fullscreenElement;\n    if (!fullScreenElement) {\n      // 让画布对象全屏\n      renderer.domElement.requestFullscreen();\n    } else {\n      //   退出全屏，使用document对象\n      document.exitFullscreen();\n    }\n  };\n\n  useEffect(() => {\n    // 初始化three场景\n    initThree();\n    window.addEventListener(\"dblclick\", fullScreen);\n    return () => {\n      window.removeEventListener(\"dblclick\", fullScreen);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (size?.width && size?.height) {\n      // 场景大小根据浏览器自适应\n      changeSize();\n    }\n  }, [size?.width, size?.height]);\n\n  return (\n    <div\n      id=\"container\"\n      style={{ width: \"100%\", height: \"100%\" }}\n      ref={ref}\n    ></div>\n  );\n};\n\nexport default Chapter5_2;\n","/*\n * @Title: 点光源\n * @Author: huangjitao\n * @Date: 2022-10-12 11:17:18\n * @Description: description of this file\n */\nimport React from \"react\";\nimport { useSize } from \"ahooks\";\nimport GUI from \"lil-gui\";\nimport { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nlet scene: THREE.Scene,\n  renderer: THREE.WebGLRenderer,\n  camera: THREE.PerspectiveCamera,\n  controls: OrbitControls,\n  axesHelper;\n\nconst Chapter5_3 = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const size = useSize(ref);\n\n  const initThree = () => {\n    /** --- 创建一个场景 --- */\n    scene = new THREE.Scene();\n\n    /** --- 创建网格模型 --- */\n    // 创建一个几何体\n    const geometry = new THREE.SphereGeometry(1, 20, 20);\n    const material = new THREE.MeshStandardMaterial();\n    // 创建一个网格模型对象\n    const mesh = new THREE.Mesh(geometry, material);\n    // 设置物体投射阴影\n    mesh.castShadow = true;\n    // 将网格模型对象添加到场景中\n    scene.add(mesh);\n\n    // 创建平面\n    const planeGeometry = new THREE.PlaneGeometry(50, 50);\n    const plane = new THREE.Mesh(planeGeometry, material);\n    plane.position.set(0, -1, 0);\n    plane.rotation.x = -Math.PI / 2;\n    // 接收其它物体的阴影\n    plane.receiveShadow = true;\n    scene.add(plane);\n\n    /** --- 设置光源 --- */\n    // 环境光\n    const ambient = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambient);\n\n    const smallBall = new THREE.Mesh(\n      new THREE.SphereGeometry(0.1, 20, 20),\n      new THREE.MeshBasicMaterial({ color: 0xff0000 })\n    );\n    smallBall.position.set(2, 2, 2);\n    //直线光源\n    const pointLight = new THREE.PointLight(0xff0000, 1);\n    // pointLight.position.set(2, 2, 2);\n    pointLight.castShadow = true;\n\n    // 设置阴影贴图模糊度\n    pointLight.shadow.radius = 20;\n    // 设置阴影贴图的分辨率\n    pointLight.shadow.mapSize.set(512, 512);\n    pointLight.decay = 0;\n\n    // 设置透视相机的属性\n    smallBall.add(pointLight);\n    scene.add(smallBall);\n\n    const panel = new GUI();\n    const pointLightPanel = panel.addFolder(\"点光源\");\n    pointLightPanel.add(smallBall.position, \"x\").min(-5).max(5).step(0.1);\n    pointLightPanel.add(smallBall.position, \"y\").min(-5).max(5).step(0.1);\n    pointLightPanel.add(smallBall.position, \"z\").min(-5).max(5).step(0.1);\n\n    /** ---添加坐标辅助--- */\n    axesHelper = new THREE.AxesHelper(5);\n    scene.add(axesHelper);\n\n    /** --- 相机设置 --- */\n    // 创建相机\n    camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    // 设置相机位置\n    camera.position.set(0, 0, 10);\n    //设置相机方向(指向的场景对象)\n    camera.lookAt(scene.position);\n\n    // 创建渲染器\n    renderer = new THREE.WebGLRenderer();\n    // 开启场景中的阴影贴图\n    renderer.shadowMap.enabled = true;\n    renderer.physicallyCorrectLights = true;\n    renderer.setClearColor(0xb9d3ff, 1); //设置背景颜色\n    renderer.render(scene, camera);\n    ref.current?.appendChild(renderer.domElement); //body元素中插入canvas对象\n\n    /** ---创建轨道控制器--- */\n    controls = new OrbitControls(camera, renderer.domElement);\n\n    render();\n  };\n\n  const changeSize = () => {\n    /** --- 相机设置 --- */\n    const width = Number(size?.width); //窗口宽度\n    const height = Number(size?.height); //窗口高度\n\n    // 更新摄像头\n    camera.aspect = width / height;\n    // 更新摄像机的投影矩阵\n    camera.updateProjectionMatrix();\n\n    //  更新渲染区域尺寸\n    renderer.setSize(width, height);\n    //  设置渲染器的像素比\n    renderer.setPixelRatio(window.devicePixelRatio);\n  };\n\n  function render() {\n    controls.update();\n    renderer.render(scene, camera);\n    // 渲染下一帧的时候就会调用render函数\n    requestAnimationFrame(render);\n  }\n\n  const fullScreen = () => {\n    const fullScreenElement = document.fullscreenElement;\n    if (!fullScreenElement) {\n      // 让画布对象全屏\n      renderer.domElement.requestFullscreen();\n    } else {\n      //   退出全屏，使用document对象\n      document.exitFullscreen();\n    }\n  };\n\n  useEffect(() => {\n    // 初始化three场景\n    initThree();\n    window.addEventListener(\"dblclick\", fullScreen);\n    return () => {\n      window.removeEventListener(\"dblclick\", fullScreen);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (size?.width && size?.height) {\n      // 场景大小根据浏览器自适应\n      changeSize();\n    }\n  }, [size?.width, size?.height]);\n\n  return (\n    <div\n      id=\"container\"\n      style={{ width: \"100%\", height: \"100%\" }}\n      ref={ref}\n    ></div>\n  );\n};\n\nexport default Chapter5_3;\n","/*\n * @Title: 点材质\n * @Author: huangjitao\n * @Date: 2022-10-18 16:36:34\n * @Description: 点材质及其属性\n */\n\nimport React from \"react\";\nimport { useSize } from \"ahooks\";\nimport GUI from \"lil-gui\";\nimport { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nlet scene: THREE.Scene,\n  renderer: THREE.WebGLRenderer,\n  camera: THREE.PerspectiveCamera,\n  controls: OrbitControls,\n  axesHelper;\n\nconst Chapter6_1 = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const size = useSize(ref);\n\n  const initThree = () => {\n    /** --- 创建一个场景 --- */\n    scene = new THREE.Scene();\n\n    const params = {\n      widthSegments: 30,\n      heightSegments: 30\n    }\n    /** --- 创建网格模型 --- */\n    // 创建一个几何体\n    const geometry = new THREE.SphereGeometry(3, params.widthSegments, params.heightSegments);\n    const material = new THREE.PointsMaterial();\n    material.size = 0.1;\n    material.color.set(0xfff000);\n    material.sizeAttenuation = true;\n    // 点材质设置纹理\n    const textureLoader = new THREE.TextureLoader();\n    const texture = textureLoader.load(\"/textures/particles/2.png\");\n    // 设置点材质纹理\n    material.map = texture;\n    material.alphaMap = texture;\n    material.transparent = true;\n    material.depthWrite = false;\n    material.blending = THREE.AdditiveBlending;\n    // 创建一个网格模型对象\n    const points = new THREE.Points(geometry, material);\n    // 将网格模型对象添加到场景中\n    scene.add(points);\n\n    const panel = new GUI();\n    console.log('points', points)\n    panel\n      .add(params, 'widthSegments')\n      .min(3)\n      .max(100)\n      .step(1)\n      .name('球的水平分段数')\n      .onChange((value: number) => {\n        points.geometry.dispose()\n        points.geometry = new THREE.SphereGeometry(3, params.widthSegments, params.heightSegments)\n      })\n    panel\n      .add(params, 'heightSegments')\n      .min(2)\n      .max(100)\n      .step(1)\n      .name('球的垂直分段数')\n      .onChange((value: number) => {\n        points.geometry.dispose()\n        points.geometry = new THREE.SphereGeometry(3, params.widthSegments, params.heightSegments)\n      })\n    panel.add(material, \"size\")\n      .min(0)\n      .max(1)\n      .step(0.01)\n      .name('点的大小')\n    panel.add(material, \"sizeAttenuation\")\n      .name('是否因相机深度而衰减')\n      .onChange((visible: boolean) => {\n        material.needsUpdate = true\n      })\n    panel.add(material, \"transparent\")\n      .name('材质是否透明')\n      .onChange((visible: boolean) => {\n        material.needsUpdate = true\n      })\n    panel.add(material, \"depthWrite\")\n      .name('渲染此材质是否对深度缓冲区有任何影响')\n      .onChange((visible: boolean) => {\n        material.needsUpdate = true\n      })\n    panel.add(material, \"blending\", {\n      \"THREE.NoBlending\": THREE.NoBlending,\n      \"THREE.NormalBlending\": THREE.NormalBlending,\n      \"THREE.AdditiveBlending\": THREE.AdditiveBlending,\n      \"THREE.SubtractiveBlending\": THREE.SubtractiveBlending,\n      \"THREE.MultiplyBlending\": THREE.MultiplyBlending,\n      \"THREE.CustomBlending\": THREE.CustomBlending\n    })\n      .name('混合模式')\n      .onChange((visible: boolean) => {\n        material.needsUpdate = true\n      })\n\n    /** --- 设置光源 --- */\n    // 环境光\n    const ambient = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambient);\n\n    //直线光源\n    const pointLight = new THREE.PointLight(0xff0000, 1);\n    pointLight.castShadow = true;\n    // 设置阴影贴图模糊度\n    pointLight.shadow.radius = 20;\n    // 设置阴影贴图的分辨率\n    pointLight.shadow.mapSize.set(512, 512);\n    pointLight.decay = 0;\n\n    /** ---添加坐标辅助--- */\n    axesHelper = new THREE.AxesHelper(5);\n    scene.add(axesHelper);\n\n    /** --- 相机设置 --- */\n    // 创建相机\n    camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    // 设置相机位置\n    camera.position.set(0, 0, 10);\n    //设置相机方向(指向的场景对象)\n    camera.lookAt(scene.position);\n\n    // 创建渲染器\n    renderer = new THREE.WebGLRenderer();\n    // 开启场景中的阴影贴图\n    renderer.shadowMap.enabled = true;\n    renderer.physicallyCorrectLights = true;\n    renderer.render(scene, camera);\n    ref.current?.appendChild(renderer.domElement); //body元素中插入canvas对象\n\n    /** ---创建轨道控制器--- */\n    controls = new OrbitControls(camera, renderer.domElement);\n\n    render();\n  };\n\n  const changeSize = () => {\n    /** --- 相机设置 --- */\n    const width = Number(size?.width); //窗口宽度\n    const height = Number(size?.height); //窗口高度\n\n    // 更新摄像头\n    camera.aspect = width / height;\n    // 更新摄像机的投影矩阵\n    camera.updateProjectionMatrix();\n\n    //  更新渲染区域尺寸\n    renderer.setSize(width, height);\n    //  设置渲染器的像素比\n    renderer.setPixelRatio(window.devicePixelRatio);\n  };\n\n  function render() {\n    controls.update();\n    renderer.render(scene, camera);\n    // 渲染下一帧的时候就会调用render函数\n    requestAnimationFrame(render);\n  }\n\n  const fullScreen = () => {\n    const fullScreenElement = document.fullscreenElement;\n    if (!fullScreenElement) {\n      // 让画布对象全屏\n      renderer.domElement.requestFullscreen();\n    } else {\n      //   退出全屏，使用document对象\n      document.exitFullscreen();\n    }\n  };\n\n  useEffect(() => {\n    // 初始化three场景\n    initThree();\n    window.addEventListener(\"dblclick\", fullScreen);\n    return () => {\n      window.removeEventListener(\"dblclick\", fullScreen);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (size?.width && size?.height) {\n      // 场景大小根据浏览器自适应\n      changeSize();\n    }\n  }, [size?.width, size?.height]);\n\n  return (\n    <div\n      id=\"container\"\n      style={{ width: \"100%\", height: \"100%\" }}\n      ref={ref}\n    ></div>\n  );\n};\n\nexport default Chapter6_1;\n","/*\n * @Title: 自定义点材质\n * @Author: huangjitao\n * @Date: 2022-10-19 11:21:41\n * @Description: 自定义一个漫天飞舞的雪花\n */\n\nimport React from \"react\";\nimport { useSize } from \"ahooks\";\nimport GUI from \"lil-gui\";\nimport { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nlet scene: THREE.Scene,\n  renderer: THREE.WebGLRenderer,\n  camera: THREE.PerspectiveCamera,\n  controls: OrbitControls,\n  clock: THREE.Clock,\n  points_1: THREE.Points<THREE.BufferGeometry, THREE.PointsMaterial>,\n  points_2: THREE.Points<THREE.BufferGeometry, THREE.PointsMaterial>,\n  points_3: THREE.Points<THREE.BufferGeometry, THREE.PointsMaterial>\n\nconst Chapter6_2 = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const size = useSize(ref);\n\n  const createPoints = (url: string, size = 0.5) => {\n    const particlesGeometry = new THREE.BufferGeometry();\n    const count = 10000;\n\n    // 设置缓冲区数组\n    const positions = new Float32Array(count * 3);\n    // 设置粒子顶点颜色\n    const colors = new Float32Array(count * 3);\n    // 设置顶点\n    for (let i = 0; i < count * 3; i++) {\n      positions[i] = (Math.random() - 0.5) * 100;\n      colors[i] = Math.random();\n    }\n    particlesGeometry.setAttribute(\n      \"position\",\n      new THREE.BufferAttribute(positions, 3)\n    );\n    particlesGeometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n\n    // 设置点材质\n    const pointsMaterial = new THREE.PointsMaterial();\n    pointsMaterial.size = 0.5;\n    pointsMaterial.color.set(0xfff000);\n    // 相机深度而衰减\n    pointsMaterial.sizeAttenuation = true;\n\n    // 载入纹理\n    const textureLoader = new THREE.TextureLoader();\n    const texture = textureLoader.load(url);\n    // 设置点材质纹理\n    pointsMaterial.map = texture;\n    pointsMaterial.alphaMap = texture;\n    pointsMaterial.transparent = true;\n    pointsMaterial.depthWrite = false;\n    pointsMaterial.blending = THREE.AdditiveBlending;\n    // 设置启动顶点颜色\n    pointsMaterial.vertexColors = true;\n\n    const points = new THREE.Points(particlesGeometry, pointsMaterial);\n    return points;\n  }\n\n  const initThree = () => {\n    /** --- 创建一个场景 --- */\n    scene = new THREE.Scene();\n\n    points_1 = createPoints(`/textures/particles/1.png`, 1.5);\n    points_2 = createPoints(`/textures/particles/1.png`, 1);\n    points_3 = createPoints(`/textures/particles/xh.png`, 2);\n    scene.add(points_1)\n    scene.add(points_2)\n    scene.add(points_3)\n\n    /** --- 设置光源 --- */\n    // 环境光\n    const ambient = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambient);\n\n    //直线光源\n    const pointLight = new THREE.PointLight(0xff0000, 1);\n    pointLight.castShadow = true;\n    // 设置阴影贴图模糊度\n    pointLight.shadow.radius = 20;\n    // 设置阴影贴图的分辨率\n    pointLight.shadow.mapSize.set(512, 512);\n    pointLight.decay = 0;\n\n    /** --- 相机设置 --- */\n    // 创建相机\n    camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    // 设置相机位置\n    camera.position.set(0, 0, 10);\n    //设置相机方向(指向的场景对象)\n    camera.lookAt(scene.position);\n\n    // 创建渲染器\n    renderer = new THREE.WebGLRenderer();\n    // 开启场景中的阴影贴图\n    renderer.shadowMap.enabled = true;\n    renderer.physicallyCorrectLights = true;\n    renderer.render(scene, camera);\n    ref.current?.appendChild(renderer.domElement); //body元素中插入canvas对象\n\n    /** ---创建轨道控制器--- */\n    controls = new OrbitControls(camera, renderer.domElement);\n\n    \n    clock = new THREE.Clock();\n    render();\n  };\n\n  const changeSize = () => {\n    /** --- 相机设置 --- */\n    const width = Number(size?.width); //窗口宽度\n    const height = Number(size?.height); //窗口高度\n\n    // 更新摄像头\n    camera.aspect = width / height;\n    // 更新摄像机的投影矩阵\n    camera.updateProjectionMatrix();\n\n    //  更新渲染区域尺寸\n    renderer.setSize(width, height);\n    //  设置渲染器的像素比\n    renderer.setPixelRatio(window.devicePixelRatio);\n  };\n\n  function render() {\n    let time = clock.getElapsedTime();\n    points_1.rotation.x = time * 0.3;\n    points_2.rotation.x = time * 0.5;\n    points_2.rotation.y = time * 0.4;\n    points_3.rotation.x = time * 0.2;\n    points_3.rotation.y = time * 0.2;\n    controls.update();\n    renderer.render(scene, camera);\n    // 渲染下一帧的时候就会调用render函数\n    requestAnimationFrame(render);\n  }\n\n  const fullScreen = () => {\n    const fullScreenElement = document.fullscreenElement;\n    if (!fullScreenElement) {\n      // 让画布对象全屏\n      renderer.domElement.requestFullscreen();\n    } else {\n      //   退出全屏，使用document对象\n      document.exitFullscreen();\n    }\n  };\n\n  useEffect(() => {\n    // 初始化three场景\n    initThree();\n    window.addEventListener(\"dblclick\", fullScreen);\n    return () => {\n      window.removeEventListener(\"dblclick\", fullScreen);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (size?.width && size?.height) {\n      // 场景大小根据浏览器自适应\n      changeSize();\n    }\n  }, [size?.width, size?.height]);\n\n  return (\n    <div\n      id=\"container\"\n      style={{ width: \"100%\", height: \"100%\" }}\n      ref={ref}\n    ></div>\n  );\n};\n\nexport default Chapter6_2;\n","/*\n * @Title: 点材质应用\n * @Author: huangjitao\n * @Date: 2022-10-19 11:21:41\n * @Description: 使用数学知识建立银河系\n */\n\nimport React from \"react\";\nimport { useSize } from \"ahooks\";\nimport { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport GUI from \"lil-gui\";\n\nlet scene: THREE.Scene,\n  renderer: THREE.WebGLRenderer,\n  camera: THREE.PerspectiveCamera,\n  controls: OrbitControls,\n  points: THREE.Points<THREE.BufferGeometry, THREE.PointsMaterial>,\n  geometry: THREE.BufferGeometry,\n  material: THREE.PointsMaterial\n\nconst params = {\n  count: 1000, // 粒子个数\n  size: 0.02,  // 粒子大小\n  radius: 5,  // 银河系半径\n  branch: 3,  // 银河系分支书\n  spin: 1, // 偏转角度\n  randomness: 0.2,  // 随机扩散\n  randomnessPower: 3, // 随机扩散幂\n  insideColor: '#ff6030',\n  outsideColor: '#1b3984',\n};\n\n\nconst Chapter6_3 = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const size = useSize(ref);\n\n  const generateGalaxy = () => {\n    if (points) {\n      geometry.dispose()\n      material.dispose()\n      scene.remove(points)\n    }\n\n    geometry = new THREE.BufferGeometry()\n    const positions = new Float32Array(params.count * 3)\n    const colors = new Float32Array(params.count * 3)\n    for (let i = 0; i < params.count; i++) {\n      const radius = Math.random() * params.radius;\n      // 根据所在的分支来获取坐标上的角度\n      const branchesAngle = ((i % params.branch) / params.branch) * Math.PI * 2;\n      // 设置偏转角度，将直线变成曲线\n      const spinAngle = radius * params.spin;\n\n      // 设置粒子颜色\n      const colorInside = new THREE.Color(params.insideColor)\n      const colorOutside = new THREE.Color(params.outsideColor)\n      const mixedColor = colorInside.clone()\n      mixedColor.lerp(colorOutside, radius / params.radius)\n      colors[i * 3] = mixedColor.r\n      colors[i * 3 + 1] = mixedColor.g\n      colors[i * 3 + 2] = mixedColor.b\n      // 设置粒子的随机扩散\n      const randomX = Math.random() ** params.randomnessPower\n        * (Math.random() < 0.5 ? 1 : -1)\n        * params.randomness\n        * radius\n      const randomY = Math.random() ** params.randomnessPower\n        * (Math.random() < 0.5 ? 1 : -1)\n        * params.randomness\n        * radius\n      const randomZ = Math.random() ** params.randomnessPower\n        * (Math.random() < 0.5 ? 1 : -1)\n        * params.randomness\n        * radius\n\n      positions[i * 3] = Math.cos(branchesAngle + spinAngle) * radius + randomX;\n      positions[i * 3 + 1] = randomY;\n      positions[i * 3 + 2] = Math.sin(branchesAngle + spinAngle) * radius + randomZ;\n    }\n    geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n    geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n\n    material = new THREE.PointsMaterial({\n      size: params.size,\n      sizeAttenuation: true,\n      depthWrite: false,\n      blending: THREE.AdditiveBlending,\n      vertexColors: true,\n    });\n\n    points = new THREE.Points(geometry, material);\n    scene.add(points);\n  };\n\n  const initThree = () => {\n    /** --- 创建一个场景 --- */\n    scene = new THREE.Scene();\n\n    // 银河系粒子生成\n    generateGalaxy();\n\n    /** --- 设置光源 --- */\n    // 环境光\n    const ambient = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambient);\n\n    //直线光源\n    const pointLight = new THREE.PointLight(0xff0000, 1);\n    pointLight.castShadow = true;\n    // 设置阴影贴图模糊度\n    pointLight.shadow.radius = 20;\n    // 设置阴影贴图的分辨率\n    pointLight.shadow.mapSize.set(512, 512);\n    pointLight.decay = 0;\n\n    /** --- 相机设置 --- */\n    // 创建相机\n    camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      100\n    );\n    // 设置相机位置\n    camera.position.set(4, 1.8, 4)\n    //设置相机方向(指向的场景对象)\n    camera.lookAt(scene.position);\n\n    // 创建渲染器\n    renderer = new THREE.WebGLRenderer();\n    // 开启场景中的阴影贴图\n    renderer.shadowMap.enabled = true;\n    renderer.physicallyCorrectLights = true;\n    renderer.render(scene, camera);\n    ref.current?.appendChild(renderer.domElement); //body元素中插入canvas对象\n\n    /** ---创建轨道控制器--- */\n    controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true\n    controls.zoomSpeed = 0.3\n\n    const gui = new GUI()\n    gui.add(controls, 'autoRotate')\n    gui.add(controls, 'autoRotateSpeed', 0.1, 10, 0.01)\n    gui.add(params, 'count', 100, 100000, 100).onFinishChange(generateGalaxy)\n    gui.add(params, 'size', 0.001, 0.1, 0.001).onFinishChange(generateGalaxy)\n    gui.add(params, 'radius', 0.01, 20, 0.01).onFinishChange(generateGalaxy)\n    gui.add(params, 'branch', 2, 20, 1).onFinishChange(generateGalaxy)\n    gui.add(params, 'spin', -5, 5, 0.001).onFinishChange(generateGalaxy)\n    gui.add(params, 'randomness', 0, 2, 0.001).onFinishChange(generateGalaxy)\n    gui.add(params, 'randomnessPower', 1, 10, 0.001).onFinishChange(generateGalaxy)\n    gui.addColor(params, 'insideColor').onFinishChange(generateGalaxy)\n    gui.addColor(params, 'outsideColor').onFinishChange(generateGalaxy)\n    gui.close()\n\n    render();\n  };\n\n  const changeSize = () => {\n    /** --- 相机设置 --- */\n    const width = Number(size?.width); //窗口宽度\n    const height = Number(size?.height); //窗口高度\n\n    // 更新摄像头\n    camera.aspect = width / height;\n    // 更新摄像机的投影矩阵\n    camera.updateProjectionMatrix();\n\n    //  更新渲染区域尺寸\n    renderer.setSize(width, height);\n    //  设置渲染器的像素比\n    renderer.setPixelRatio(window.devicePixelRatio);\n  };\n\n  function render() {\n    controls.update();\n    renderer.render(scene, camera);\n    // 渲染下一帧的时候就会调用render函数\n    requestAnimationFrame(render);\n  }\n\n  const fullScreen = () => {\n    const fullScreenElement = document.fullscreenElement;\n    if (!fullScreenElement) {\n      // 让画布对象全屏\n      renderer.domElement.requestFullscreen();\n    } else {\n      //   退出全屏，使用document对象\n      document.exitFullscreen();\n    }\n  };\n\n  useEffect(() => {\n    // 初始化three场景\n    initThree();\n    window.addEventListener(\"dblclick\", fullScreen);\n    return () => {\n      window.removeEventListener(\"dblclick\", fullScreen);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (size?.width && size?.height) {\n      // 场景大小根据浏览器自适应\n      changeSize();\n    }\n  }, [size?.width, size?.height]);\n\n  return (\n    <div\n      id=\"container\"\n      style={{ width: \"100%\", height: \"100%\" }}\n      ref={ref}\n    ></div>\n  );\n};\n\nexport default Chapter6_3;\n","/*\n * @Title: 光线投射\n * @Author: huangjitao\n * @Date: 2022-10-21 10:39:11\n * @Description: 光线投射 Raycaster 的使用\n */\n\nimport React from \"react\";\nimport { useSize } from \"ahooks\";\nimport { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nlet scene: THREE.Scene,\n  renderer: THREE.WebGLRenderer,\n  camera: THREE.PerspectiveCamera,\n  controls: OrbitControls,\n  cubeArr: THREE.Mesh<THREE.BoxGeometry, THREE.MeshBasicMaterial>[] = [],\n  rayCaster: THREE.Raycaster,\n  mouse: THREE.Vector2,\n  redMaterial: THREE.MeshBasicMaterial,\n  material: THREE.MeshBasicMaterial\n\n\nconst Chapter7_1 = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const size = useSize(ref);\n\n  const initThree = () => {\n    /** --- 创建一个场景 --- */\n    scene = new THREE.Scene();\n\n    const boxGeometry = new THREE.BoxGeometry(1, 1, 1);\n    material = new THREE.MeshBasicMaterial({ wireframe: true });\n    redMaterial = new THREE.MeshBasicMaterial({ color: '#ff0000' })\n    // 创建立方体\n    for (let i = 0; i < 5; i++) {\n      for (let j = 0; j < 5; j++) {\n        for (let k = 0; k < 5; k++) {\n          const cube = new THREE.Mesh(boxGeometry, material)\n          cube.position.set(i, j, k)\n          scene.add(cube)\n          cubeArr.push(cube)\n        }\n      }\n    }\n\n    // 创建光线投射\n    rayCaster = new THREE.Raycaster();\n    // 创建鼠标位置对象\n    mouse = new THREE.Vector2();\n\n    /** --- 设置光源 --- */\n    // 环境光\n    const ambient = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambient);\n\n    //直线光源\n    const pointLight = new THREE.PointLight(0xff0000, 1);\n    pointLight.castShadow = true;\n    // 设置阴影贴图模糊度\n    pointLight.shadow.radius = 20;\n    // 设置阴影贴图的分辨率\n    pointLight.shadow.mapSize.set(512, 512);\n    pointLight.decay = 0;\n\n    /** --- 相机设置 --- */\n    // 创建相机\n    camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      300\n    );\n    // 设置相机位置\n    camera.position.set(0, 0, 20);\n    //设置相机方向(指向的场景对象)\n    camera.lookAt(scene.position);\n\n    // 创建渲染器\n    renderer = new THREE.WebGLRenderer();\n    // 开启场景中的阴影贴图\n    renderer.shadowMap.enabled = true;\n    renderer.physicallyCorrectLights = true;\n    renderer.render(scene, camera);\n    ref.current?.appendChild(renderer.domElement); //body元素中插入canvas对象\n\n    /** ---创建轨道控制器--- */\n    controls = new OrbitControls(camera, renderer.domElement);\n\n    render();\n  };\n\n  const changeSize = () => {\n    /** --- 相机设置 --- */\n    const width = Number(size?.width); //窗口宽度\n    const height = Number(size?.height); //窗口高度\n\n    // 更新摄像头\n    camera.aspect = width / height;\n    // 更新摄像机的投影矩阵\n    camera.updateProjectionMatrix();\n\n    //  更新渲染区域尺寸\n    renderer.setSize(width, height);\n    //  设置渲染器的像素比\n    renderer.setPixelRatio(window.devicePixelRatio);\n  };\n\n  function render() {\n    controls.update();\n    renderer.render(scene, camera);\n    // 渲染下一帧的时候就会调用render函数\n    requestAnimationFrame(render);\n  }\n\n  const fullScreen = () => {\n    const fullScreenElement = document.fullscreenElement;\n    if (!fullScreenElement) {\n      // 让画布对象全屏\n      renderer.domElement.requestFullscreen();\n    } else {\n      //   退出全屏，使用document对象\n      document.exitFullscreen();\n    }\n  };\n\n  useEffect(() => {\n    // 初始化three场景\n    initThree();\n    window.addEventListener(\"dblclick\", fullScreen);\n    return () => {\n      window.removeEventListener(\"dblclick\", fullScreen);\n    };\n  }, []);\n\n  const mouseClick = (event: MouseEvent) => {\n    const width = Number(size?.width); //窗口宽度\n    const height = Number(size?.height); //窗口高度\n    mouse.x = (event.offsetX / width) * 2 - 1;\n    mouse.y = -((event.offsetY / height) * 2 - 1);\n    rayCaster.setFromCamera(mouse, camera);\n    let result = rayCaster.intersectObjects(cubeArr);\n    result.forEach((item: any) => {\n      item.object.material = redMaterial\n    });\n    if (result.length === 0) {\n      cubeArr.forEach((item: any) => {\n        item.material = material\n      });\n    }\n  }\n\n  useEffect(() => {\n    if (size?.width && size?.height) {\n      // 场景大小根据浏览器自适应\n      changeSize();\n    }\n    window.addEventListener(\"click\", mouseClick)\n    return () => {\n      window.removeEventListener(\"click\", mouseClick)\n    }\n  }, [size?.width, size?.height]);\n\n  return (\n    <div\n      id=\"container\"\n      style={{ width: \"100%\", height: \"100%\" }}\n      ref={ref}\n    ></div>\n  );\n};\n\nexport default Chapter7_1;\n","/*\n * @Title: 3d物理引擎\n * @Author: huangjitao\n * @Date: 2022-11-14 15:02:40\n * @Description: 使用cannon-es创建物理世界\n */\n\nimport React from \"react\";\nimport { useSize } from \"ahooks\";\nimport { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport * as CANNON from \"cannon-es\";\n\nlet renderer: THREE.WebGLRenderer, camera: THREE.PerspectiveCamera;\n\nconst Chapter9_1 = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const size = useSize(ref);\n\n  const initThree = () => {\n    /** --- 创建一个场景 --- */\n    const scene = new THREE.Scene();\n\n    /** --- 设置光源 --- */\n    // 环境光\n    const ambient = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambient);\n    //直线光源\n    const dirLight = new THREE.DirectionalLight(0xffffff, 1);\n    dirLight.castShadow = true;\n    scene.add(dirLight);\n\n    /** --- 创建球和平面 --- */\n    const sphereGeometry = new THREE.SphereGeometry(1, 20, 20);\n    const sphereMaterial = new THREE.MeshStandardMaterial();\n    const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n    sphere.castShadow = true;\n    scene.add(sphere);\n\n    const floor = new THREE.Mesh(\n      new THREE.PlaneGeometry(20, 20),\n      new THREE.MeshStandardMaterial()\n    );\n    floor.position.set(0, -5, 0);\n    floor.rotation.x = -Math.PI / 2;\n    floor.receiveShadow = true;\n    scene.add(floor);\n\n    /** --- 创建物理世界 --- */\n    const world = new CANNON.World();\n    // 仅设置y轴（垂直方向）的重力加速度\n    world.gravity.set(0, -9.8, 0);\n    // 创建物理小球\n    const sphereShape = new CANNON.Sphere(1);\n    // 设置物理小球材质\n    const sphereWorldMaterial = new CANNON.Material();\n    // 创建物理世界的物体\n    const sphereBody = new CANNON.Body({\n      shape: sphereShape,\n      material: sphereWorldMaterial,\n      mass: 1, // 小球质量\n      position: new CANNON.Vec3(0, 0, 0), // 起始位置和three.js中的小球相同\n    });\n    world.addBody(sphereBody);\n\n    // 创建物理地面\n    const floorShape = new CANNON.Plane();\n    const floorBody = new CANNON.Body();\n    // 设置质量为0时，可以使得地面不动\n    floorBody.mass = 0;\n    floorBody.addShape(floorShape);\n    // 地面位置\n    floorBody.position.set(0, -5, 0);\n    // 旋转地面的位置\n    floorBody.quaternion.setFromAxisAngle(\n      new CANNON.Vec3(1, 0, 0),\n      -Math.PI / 2\n    );\n    world.addBody(floorBody);\n\n    /** --- 相机设置 --- */\n    // 创建相机\n    camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      300\n    );\n    // 设置相机位置\n    camera.position.set(0, 0, 18);\n    //设置相机方向(指向的场景对象)\n    camera.lookAt(scene.position);\n\n    // 创建渲染器\n    renderer = new THREE.WebGLRenderer();\n    // 开启场景中的阴影贴图\n    renderer.shadowMap.enabled = true;\n    renderer.physicallyCorrectLights = true;\n    renderer.render(scene, camera);\n    ref.current?.appendChild(renderer.domElement); //body元素中插入canvas对象\n\n    /** ---创建轨道控制器--- */\n    const controls = new OrbitControls(camera, renderer.domElement);\n\n    const clock = new THREE.Clock();\n\n    function render() {\n      let deltaTime = clock.getDelta();\n      // 更新物理引擎里世界的物体\n      world.step(1 / 120, deltaTime);\n      sphere.position.copy(sphereBody.position as any);\n\n      controls.update();\n      renderer.render(scene, camera);\n      // 渲染下一帧的时候就会调用render函数\n      requestAnimationFrame(render);\n    }\n    render();\n  };\n\n  const changeSize = () => {\n    /** --- 相机设置 --- */\n    const width = Number(size?.width); //窗口宽度\n    const height = Number(size?.height); //窗口高度\n\n    // 更新摄像头\n    camera.aspect = width / height;\n    // 更新摄像机的投影矩阵\n    camera.updateProjectionMatrix();\n\n    //  更新渲染区域尺寸\n    renderer.setSize(width, height);\n    //  设置渲染器的像素比\n    renderer.setPixelRatio(window.devicePixelRatio);\n  };\n\n  useEffect(() => {\n    if (size?.width && size?.height) {\n      // 场景大小根据浏览器自适应\n      changeSize();\n    }\n  }, [size?.width, size?.height]);\n\n  const fullScreen = () => {\n    const fullScreenElement = document.fullscreenElement;\n    if (!fullScreenElement) {\n      // 让画布对象全屏\n      renderer.domElement.requestFullscreen();\n    } else {\n      //   退出全屏，使用document对象\n      document.exitFullscreen();\n    }\n  };\n\n  useEffect(() => {\n    // 初始化three场景\n    initThree();\n    window.addEventListener(\"dblclick\", fullScreen);\n    return () => {\n      window.removeEventListener(\"dblclick\", fullScreen);\n    };\n  }, []);\n\n  return (\n    <div\n      id=\"container\"\n      style={{ width: \"100%\", height: \"100%\" }}\n      ref={ref}\n    ></div>\n  );\n};\n\nexport default Chapter9_1;\n","/*\n * @Title: 物体之间的相互作用力\n * @Author: huangjitao\n * @Date: 2022-11-15 10:01:08\n * @Description: 创建一个具有物理效果的真实世界\n */\n\nimport React from \"react\";\nimport { useSize } from \"ahooks\";\nimport { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport * as CANNON from \"cannon-es\";\n\nlet renderer: THREE.WebGLRenderer,\n  camera: THREE.PerspectiveCamera,\n  cubeArr: { mesh: THREE.Mesh; body: CANNON.Body }[] = [];\n\nconst Chapter9_2 = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const size = useSize(ref);\n\n  const initThree = () => {\n    /** --- 创建一个场景 --- */\n    const scene = new THREE.Scene();\n\n    /** --- 设置光源 --- */\n    // 环境光\n    const ambient = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambient);\n    //直线光源\n    const dirLight = new THREE.DirectionalLight(0xffffff, 1);\n    dirLight.castShadow = true;\n    scene.add(dirLight);\n\n    // 创建物理世界\n    const world = new CANNON.World();\n    // 仅设置y轴（垂直方向）的重力加速度\n    world.gravity.set(0, -9.8, 0);\n    // 创建击打声音\n    const hitSound = new Audio(\"/audio/metal_hit.mp3\");\n    // 设置物理立方体材质\n    const cubeWorldMaterial = new CANNON.Material(\"sphere\");\n\n    const createCube = () => {\n      // 创建立方体\n      const cubeGeometry = new THREE.BoxGeometry(1, 1, 1);\n      const cubeMaterial = new THREE.MeshStandardMaterial();\n      const cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\n      cube.castShadow = true;\n      scene.add(cube);\n\n      // 创建物理立方体\n      const cubeShape = new CANNON.Sphere(1);\n      // 创建物理世界的物体\n      const cubeBody = new CANNON.Body({\n        shape: cubeShape,\n        material: cubeWorldMaterial,\n        mass: 1,\n        position: new CANNON.Vec3(0, 0, 0),\n      });\n      cubeBody.applyLocalForce(\n        new CANNON.Vec3(300, 0, 0), //添加的力的大小和方向\n        new CANNON.Vec3(0, 0, 0) //施加的力所在的位置\n      );\n      world.addBody(cubeBody);\n\n      // 添加监听碰撞事件\n      const HitEvent = (e: any) => {\n        // 获取碰撞的强度\n        const impactStrength = e.contact.getImpactVelocityAlongNormal();\n        console.log(impactStrength);\n        if (impactStrength > 2) {\n          //   重新从零开始播放\n          hitSound.currentTime = 0;\n          hitSound.volume = impactStrength / 12;\n          hitSound.play();\n        }\n      };\n      cubeBody.addEventListener(\"collide\", HitEvent);\n\n      cubeArr.push({\n        mesh: cube,\n        body: cubeBody,\n      });\n    };\n\n    window.addEventListener(\"click\", createCube);\n\n    const floor = new THREE.Mesh(\n      new THREE.PlaneGeometry(100, 100),\n      new THREE.MeshStandardMaterial()\n    );\n    floor.position.set(0, -5, 0);\n    floor.rotation.x = -Math.PI / 2;\n    floor.receiveShadow = true;\n    scene.add(floor);\n\n    // 创建物理地面\n    const floorShape = new CANNON.Plane();\n    const floorBody = new CANNON.Body();\n    // 设置物理地面材质\n    const floorMaterial = new CANNON.Material(\"floor\");\n    floorBody.material = floorMaterial;\n    // 设置质量为0时，可以使得地面不动\n    floorBody.mass = 0;\n    floorBody.addShape(floorShape);\n    // 地面位置\n    floorBody.position.set(0, -5, 0);\n    // 旋转地面的位置\n    floorBody.quaternion.setFromAxisAngle(\n      new CANNON.Vec3(1, 0, 0),\n      -Math.PI / 2\n    );\n    world.addBody(floorBody);\n\n    // 设置立方体和地面材质的碰撞参数\n    const defaultContactMaterial = new CANNON.ContactMaterial(\n      cubeWorldMaterial,\n      floorMaterial,\n      {\n        friction: 0.1, // 设置摩擦力\n        restitution: 0.7, // 设置弹力\n      }\n    );\n    world.addContactMaterial(defaultContactMaterial);\n    // 设置世界碰撞的默认材料，如果材料没有设置，都用这个\n    world.defaultContactMaterial = defaultContactMaterial;\n\n\n    /** --- 相机设置 --- */\n    // 创建相机\n    camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      300\n    );\n    // 设置相机位置\n    camera.position.set(0, 0, 18);\n    //设置相机方向(指向的场景对象)\n    camera.lookAt(scene.position);\n\n    // 创建渲染器\n    renderer = new THREE.WebGLRenderer();\n    // 开启场景中的阴影贴图\n    renderer.shadowMap.enabled = true;\n    renderer.physicallyCorrectLights = true;\n    renderer.render(scene, camera);\n    ref.current?.appendChild(renderer.domElement); //body元素中插入canvas对象\n\n    /** ---创建轨道控制器--- */\n    const controls = new OrbitControls(camera, renderer.domElement);\n\n    const clock = new THREE.Clock();\n\n    function render() {\n      let deltaTime = clock.getDelta();\n      // 更新物理引擎里世界的物体\n      world.step(1 / 120, deltaTime);\n      // 更新物理引擎里世界的物体\n      cubeArr.forEach((item) => {\n        item.mesh.position.copy(item.body.position as any);\n        // 设置渲染的物体跟随物理的物体旋转\n        item.mesh.quaternion.copy(item.body.quaternion as any);\n      });\n\n      controls.update();\n      renderer.render(scene, camera);\n      // 渲染下一帧的时候就会调用render函数\n      requestAnimationFrame(render);\n    }\n    render();\n  };\n\n  const changeSize = () => {\n    /** --- 相机设置 --- */\n    const width = Number(size?.width); //窗口宽度\n    const height = Number(size?.height); //窗口高度\n\n    // 更新摄像头\n    camera.aspect = width / height;\n    // 更新摄像机的投影矩阵\n    camera.updateProjectionMatrix();\n\n    //  更新渲染区域尺寸\n    renderer.setSize(width, height);\n    //  设置渲染器的像素比\n    renderer.setPixelRatio(window.devicePixelRatio);\n  };\n\n  useEffect(() => {\n    if (size?.width && size?.height) {\n      // 场景大小根据浏览器自适应\n      changeSize();\n    }\n  }, [size?.width, size?.height]);\n\n  const fullScreen = () => {\n    const fullScreenElement = document.fullscreenElement;\n    if (!fullScreenElement) {\n      // 让画布对象全屏\n      renderer.domElement.requestFullscreen();\n    } else {\n      //   退出全屏，使用document对象\n      document.exitFullscreen();\n    }\n  };\n\n  useEffect(() => {\n    // 初始化three场景\n    initThree();\n    window.addEventListener(\"dblclick\", fullScreen);\n    return () => {\n      window.removeEventListener(\"dblclick\", fullScreen);\n    };\n  }, []);\n\n  return (\n    <div\n      id=\"container\"\n      style={{ width: \"100%\", height: \"100%\" }}\n      ref={ref}\n    ></div>\n  );\n};\n\nexport default Chapter9_2;\n","/*\n * @Title: 3d全屏滚动实现页面\n * @Author: huangjitao\n * @Date: 2022-10-25 15:22:12\n * @Description: description of this file\n */\n\nimport { useEffect } from \"react\";\nimport \"./index.css\";\nimport * as THREE from \"three\";\nimport * as dat from \"lil-gui\";\nimport gsap from 'gsap'\n\nlet renderer: THREE.WebGLRenderer,\n  camera: THREE.PerspectiveCamera,\n  mouse = { x: 0, y: 0 },\n  previousTime = 0,\n  sectionMeshes: THREE.Mesh< THREE.BufferGeometry, THREE.MeshToonMaterial >[] = [];\n\nconst parameters = {\n  materialColor: \"#FFF59D\",\n};\nlet objectsDistance = 5;\nconst particlesCount = 200;\nlet currentSection = 0;\nconst isPortrait = window.innerWidth < window.innerHeight; // 是否横屏\n\nconst ScrollFull3d = () => {\n  const initThree = () => {\n    // Canvas画布\n    const canvas = document.querySelector(\"#mainCanvas\") as HTMLCanvasElement;\n    // Scene场景\n    const scene = new THREE.Scene();\n    // 设置相机\n    const cameraGroup = new THREE.Group();\n    scene.add(cameraGroup);\n    const sizes = {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    };\n    camera = new THREE.PerspectiveCamera(\n      75,\n      sizes.width / sizes.height,\n      0.1,\n      100\n    );\n    camera.position.set(0, 0, 4);\n    cameraGroup.add(camera);\n    if (isPortrait) {\n      camera.position.setZ(8)\n      objectsDistance = 11\n    }\n\n    // 设置材质\n    const textureLoader = new THREE.TextureLoader();\n    const gradientTexture = textureLoader.load(\n      \"https://gw.alicdn.com/imgextra/i1/O1CN01Kv3xWT1kImpSDZI8n_!!6000000004661-0-tps-5-1.jpg\"\n    );\n    gradientTexture.magFilter = THREE.NearestFilter;\n    const material = new THREE.MeshToonMaterial({\n      color: parameters.materialColor,\n      gradientMap: gradientTexture,\n    });\n\n    // 设置Meshes\n    const mesh1 = new THREE.Mesh(\n      new THREE.TorusGeometry(1, 0.4, 16, 60),\n      material\n    );\n    const mesh2 = new THREE.Mesh(new THREE.ConeGeometry(1, 2, 32), material);\n    const mesh3 = new THREE.Mesh(\n      new THREE.TorusKnotGeometry(0.8, 0.35, 100, 16),\n      material\n    );\n    scene.add(mesh1, mesh2, mesh3);\n\n    mesh1.position.y = -objectsDistance * 0;\n    mesh2.position.y = -objectsDistance * 1;\n    mesh3.position.y = -objectsDistance * 2;\n    sectionMeshes = [mesh1, mesh2, mesh3];\n\n    // 设置粒子效果\n    const positions = new Float32Array(particlesCount * 3);\n    for (let i = 0; i < particlesCount; i++) {\n      positions[i * 3 + 0] = (Math.random() - 0.5) * 10;\n      positions[i * 3 + 1] = objectsDistance * 0.5 - Math.random() * objectsDistance * sectionMeshes.length;\n      positions[i * 3 + 2] = (Math.random() - 0.5) * 10;\n    }\n    const particlesGeometry = new THREE.BufferGeometry();\n    particlesGeometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n    const particlesMaterial = new THREE.PointsMaterial({\n      color: parameters.materialColor,\n      sizeAttenuation: true,\n      size: 0.03,\n    });\n    const particels = new THREE.Points(particlesGeometry, particlesMaterial);\n    scene.add(particels);\n    sectionMeshes.forEach((mesh, index) => {\n      if (isPortrait) {\n        mesh.position.setY(-objectsDistance * index)\n      } else {\n        mesh.position.setX(index % 2 === 0 ? 2 : -2)\n        mesh.position.setY(-objectsDistance * index)\n      }\n    });\n\n    // 设置灯光\n    const directionLight = new THREE.DirectionalLight();\n    directionLight.position.set(1, 1, 0);\n    const ambientLight = new THREE.AmbientLight(\n      new THREE.Color(\"#ffffff\"),\n      0.28\n    );\n    scene.add(ambientLight, directionLight);\n\n    renderer = new THREE.WebGLRenderer({\n      canvas,\n      antialias: true,\n      alpha: true,\n    });\n    renderer.setSize(sizes.width, sizes.height);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\n    // 设置渲染方法\n    const clock = new THREE.Clock();\n    const render = () => {\n      const elapsedTime = clock.getElapsedTime();\n      const deltaTime = elapsedTime - previousTime;\n      previousTime = elapsedTime;\n      // 设置mesh动画\n      sectionMeshes.forEach((mesh, index) => {\n        mesh.rotation.set(deltaTime * 0.1 + mesh.rotation.x, deltaTime * 0.1 + mesh.rotation.y, 0);\n      });\n      const scrollY = window.scrollY;\n      const height = window.innerHeight;\n      camera.position.setY((-scrollY / height) * objectsDistance);\n      if (mouse.x && mouse.y) {\n        const parallaxX = mouse.x * 0.5;\n        const parallaxY = mouse.y * 0.5;\n        cameraGroup.position.x +=\n          (parallaxX - cameraGroup.position.x) * 5 * deltaTime;\n        cameraGroup.position.y +=\n          (parallaxY - cameraGroup.position.y) * 5 * deltaTime;\n      }\n      renderer.render(scene, camera);\n      requestAnimationFrame(render);\n    };\n\n    render();\n\n    const gui = new dat.GUI();\n    gui.addColor(parameters, \"materialColor\").onChange(() => {\n      material.color.set(parameters.materialColor);\n      particlesMaterial.color.set(parameters.materialColor)\n    });\n  };\n\n  // three.js场景自适应\n  const changeSize = () => {\n    /** --- 相机设置 --- */\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    // 更新摄像头\n    camera.aspect = width / height;\n    // 更新摄像机的投影矩阵\n    camera.updateProjectionMatrix();\n    //  更新渲染区域尺寸\n    renderer.setSize(width, height);\n    //  设置渲染器的像素比\n    renderer.setPixelRatio(window.devicePixelRatio);\n  };\n\n  // 鼠标滑动设置视差效果\n  const mouseMove = (event: MouseEvent) => {\n    const width = window.innerWidth; //窗口宽度\n    const height = window.innerHeight; //窗口高度\n    mouse.x = (event.clientX / width) * 2 - 1;\n    mouse.y = -((event.clientY / height) * 2 - 1);\n  };\n\n  // 设置滚动动画\n  const scrollAnimation = () => {\n    const { scrollY, innerHeight } = window\n    const newSection = Math.round(scrollY / innerHeight)\n    if (currentSection !== newSection) {\n      currentSection = newSection;\n      console.log('changed', currentSection)\n      gsap.to(sectionMeshes[currentSection].rotation, {\n        duration: 1.5,\n        ease: 'power2.inOut',\n        x: '+=6',\n        y: '+=3',\n      })\n    }\n  }\n\n  useEffect(() => {\n    initThree();\n    window.addEventListener(\"resize\", changeSize);\n    window.addEventListener(\"mousemove\", mouseMove);\n    window.addEventListener(\"scroll\", scrollAnimation);\n    return () => {\n      window.removeEventListener(\"resize\", changeSize);\n      window.removeEventListener(\"mousemove\", mouseMove);\n      window.removeEventListener(\"scroll\", scrollAnimation);\n    };\n  }, []);\n\n  return (\n    <div className=\"scroll3d\">\n      <canvas id=\"mainCanvas\" className=\"webgl\"></canvas>\n      <section className=\"section\">\n        <h1>Hello</h1>\n      </section>\n      <section className=\"section\">\n        <h2>My projects</h2>\n      </section>\n      <section className=\"section\">\n        <h2>Contact me</h2>\n      </section>\n    </div>\n  );\n};\n\nexport default ScrollFull3d;\n","/*\n * @Descripttion: three.js基本介绍\n * @Author: huangjitao\n * @Date: 2021-08-05 19:36:19\n * @Function: 该文件用途描述\n */\n\nimport { Typography } from \"antd\";\n\nconst { Title, Text, Paragraph } = Typography\n\nconst Chapter1_1 = () => {\n\n  return (\n    <div style={{ padding: '50px' }}>\n      <Typography>\n        <Title level={2}>什么是Three.js</Title>\n        <ul>\n          <li>Three.js是基于原生WebGL封装运行的三维引擎。</li>\n          <li>WebGL是一种Javascript的3D图形接口，把JavaScript和OpenGL ES 2.0结合在一起。</li>\n          <li>Unity、UnReal等是客户端的三维引擎; Three.js则是网页端的三维引擎。</li>\n        </ul>\n\n        <Title level={2}>为什么要使用Three.js</Title>\n        <ul>\n          <li>利用Three.JS可以制作出很多酷炫的3D动画，并且Three.js还可以通过鼠标、键盘、拖拽等事件形成交互，在页面上增加一些3D动画和3D交互可以产生更好的用户体验。</li>\n          <li>通过Three.JS可以实现全景视图，这些全景视图应用在房产、家装行业能够带来更直观的视觉体验。在电商行业利用Three.JS可以实现产品的3D效果，这样用户就可以360度全方位地观察商品了，给用户带来更好的购物体验。</li>\n          <li>使用Three.JS还可以制作类似微信跳一跳那样的小游戏。随着技术的发展、基础网络的建设，web3D技术还能得到更广泛的应用。</li>\n        </ul>\n      </Typography>\n    </div>\n  );\n}\n\nexport default Chapter1_1\n","/*\n * @Title: webgl绘制\n * @Author: huangjitao\n * @Date: 2022-11-23 11:35:04\n * @Description: 使用webgl绘制一个三角形\n */\n\nimport React, { useEffect} from \"react\";\n\nconst Chapter10_1 = () => {\n  \n  useEffect(() => {\n    const canvas = document.getElementById(\"webgl\") as HTMLCanvasElement;\n    const gl = canvas.getContext(\"webgl\") as WebGLRenderingContext;\n    gl.viewport(0, 0, canvas.width, canvas.height);\n\n    // 创建顶点着色器\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER) as WebGLShader;\n    // 设置顶点着色器的源码\n    gl.shaderSource(\n      vertexShader,\n      `\n      attribute vec4 a_Position;\n      void main() {\n        gl_Position = a_Position;\n      }\n    `\n    );\n    // 编译顶点着色器\n    gl.compileShader(vertexShader);\n\n    // 创建片元着色器\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER) as WebGLShader;\n    // 设置片元着色器的源码\n    gl.shaderSource(\n      fragmentShader,\n      `\n      void main() {\n        gl_FragColor = vec4(1.0, 0, 0, 1.0); \n      }\n    `\n    );\n    // 编译片元着色器\n    gl.compileShader(fragmentShader);\n\n    // 创建链接（link）着色器的程序\n    const program = gl.createProgram() as WebGLProgram;\n    // 将顶点着色器和片元着色器链接到程序上\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    // 链接程序\n    gl.linkProgram(program);\n    // 使用程序\n    gl.useProgram(program)\n\n    // 创建顶点缓冲区对象\n    const vertexBuffer = gl.createBuffer();\n    // 绑定顶点缓冲区对象\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n    // 向顶点缓冲区对象写入数据\n    const vertices = new Float32Array([0, 0.5, -0.5, -0.5, 0.5, -0.5]);\n    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n\n    // 获取顶点着色器中a_Position的位置\n    const a_Position = gl.getAttribLocation(program, \"a_Position\");\n    // 将顶点缓冲区对象分配给a_Position变量\n    gl.vertexAttribPointer(a_Position, 2, gl.FLOAT, false, 0, 0);\n    // 启用顶点着色器中的a_Position变量\n    gl.enableVertexAttribArray(a_Position);\n\n    // 绘制三角形\n    gl.drawArrays(gl.TRIANGLES, 0, 3);\n  }, []);\n\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <canvas\n        id=\"webgl\"\n        style={{ width: \"100%\", height: \"100%\" }}\n      />\n    </div>\n  );\n};\n\nexport default Chapter10_1;\n","/*\n * @Title: webgl动画\n * @Author: huangjitao\n * @Date: 2022-11-24 10:28:47\n * @Description: 使用webgl绘制三角形缩放动画\n */\n\nimport React, { useEffect } from \"react\";\n\nconst Chapter10_2 = () => {\n  useEffect(() => {\n    const canvas = document.getElementById(\"webgl\") as HTMLCanvasElement;\n    // canvas.width = window.innerWidth;\n    // canvas.height = window.innerHeight;\n    const gl = canvas.getContext(\"webgl\") as WebGLRenderingContext;\n    gl.viewport(0, 0, canvas.width, canvas.height);\n\n    // 创建顶点着色器\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER) as WebGLShader;\n    // 设置顶点着色器的源码\n    gl.shaderSource(\n      vertexShader,\n      `\n      attribute vec4 a_Position;\n      uniform mat4 u_Mat;\n      varying vec4 v_Color;\n      void main() {\n        gl_Position = u_Mat * a_Position;\n        v_Color = gl_Position;\n      }\n    `\n    );\n    // 编译顶点着色器\n    gl.compileShader(vertexShader);\n\n    // 创建片元着色器\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER) as WebGLShader;\n    // 设置片元着色器的源码\n    gl.shaderSource(\n      fragmentShader,\n      `\n      precision mediump float;\n      varying vec4 v_Color;\n      void main() {\n        gl_FragColor = v_Color; \n      }\n    `\n    );\n    // 编译片元着色器\n    gl.compileShader(fragmentShader);\n\n    // 创建链接（link）着色器的程序\n    const program = gl.createProgram() as WebGLProgram;\n    // 将顶点着色器和片元着色器链接到程序上\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    // 链接程序\n    gl.linkProgram(program);\n    // 使用程序\n    gl.useProgram(program);\n\n    // 创建顶点缓冲区对象\n    const vertexBuffer = gl.createBuffer();\n    // 绑定顶点缓冲区对象\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n    // 向顶点缓冲区对象写入数据\n    const vertices = new Float32Array([0.0, 0.5, -0.5, -0.5, 0.5, -0.5]);\n    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n\n    // 获取顶点着色器中a_Position的位置\n    const a_Position = gl.getAttribLocation(program, \"a_Position\");\n    // 将顶点缓冲区对象分配给a_Position变量\n    gl.vertexAttribPointer(a_Position, 2, gl.FLOAT, false, 0, 0);\n    // 启用顶点着色器中的a_Position变量\n    gl.enableVertexAttribArray(a_Position);\n\n    // 绘制三角形缩放动画\n    const scale = {\n      x: 1.5,\n      y: 1.5,\n      z: 1.5,\n    };\n    function animate() {\n      if (scale.x <= -1.5) {\n        scale.x = 1.5\n      } else {\n        scale.x -= 0.01\n      }\n      const mat = new Float32Array([\n        scale.x, 0.0, 0.0, 0.0,\n        0.0, scale.x, 0.0, 0.0,\n        0.0, 0.0, scale.x, 0.0,\n        0.0, 0.0, 0.0, 1.0,\n      ]);\n      const u_Mat = gl.getUniformLocation(program, 'u_Mat');\n      gl.uniformMatrix4fv(u_Mat, false, mat);\n      // 绘制三角形\n      gl.drawArrays(gl.TRIANGLES, 0, 3);\n      requestAnimationFrame(animate);\n    }\n\n    animate();\n  }, []);\n\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <canvas id=\"webgl\" style={{ width: \"100%\", height: \"100%\" }} />\n    </div>\n  );\n};\n\nexport default Chapter10_2;\n","const VertexShader = /*glsl*/`\n  void main(){\n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\n  }\n`\n\nexport default VertexShader","const FragmentShader = /*glsl*/`\n  void main(){\n    gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);\n  }\n`\n\nexport default FragmentShader","const VertexShader = /*glsl*/ `\n  precision lowp float;\n  attribute vec3 position;\n  attribute vec2 uv;\n\n  uniform mat4 projectionMatrix;\n  uniform mat4 viewMatrix;\n  uniform mat4 modelMatrix;\n  uniform float uTime;\n  uniform sampler2D uTexture;\n\n  varying vec2 v_Uv;\n  varying float v_Elevation;\n\n  void main(){\n    v_Uv = uv;\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n    modelPosition.z = sin((modelPosition.x + uTime) * 10.0) * 0.05 ;\n    modelPosition.z += sin((modelPosition.y + uTime)  * 10.0) * 0.05 ;\n    v_Elevation = modelPosition.z;\n\n    gl_Position = projectionMatrix * viewMatrix * modelPosition ;\n  }\n`;\n\nexport default VertexShader;\n","const FragmentShader = /*glsl*/ `\n  precision lowp float;\n  varying vec2 v_Uv;\n  varying float v_Elevation;\n\n  uniform sampler2D uTexture; \n\n  void main(){\n      // 不使用材质，制作波浪效果\n      // gl_FragColor = vec4(v_Uv, 0.0, 1.0);\n      // float height = v_Elevation + 0.05 * 10.0;\n      // gl_FragColor = vec4(1.0 * height, 0.0, 0.0, 1.0);\n\n      // 使用材质，制作旗帜飘扬效果\n      float height = v_Elevation + 0.05 * 20.0;\n      vec4 textureColor = texture2D(uTexture, v_Uv);\n      textureColor.rgb *= height;\n      gl_FragColor = textureColor;\n  }\n`;\n\nexport default FragmentShader;\n","const FragmentShader_1 = /*glsl*/ `\n  precision lowp float;\n  uniform float uTime;\n  uniform float uScale;\n  varying vec2 vUv; \n\n  void main(){\n    // 通过顶点对应的uv，决定每一个像素在uv图像的位置，通过这个位置x,y决定颜色\n    gl_FragColor = vec4(vUv,0,1) ;\n  }\n`;\n\nexport default FragmentShader_1;\n","const VertexShader = /*glsl*/ `\n  varying vec2 vUv;\n  precision lowp float;\n\n  void main(){\n    vec4 modelPosition = modelMatrix * vec4( position, 1.0 );\n    vUv = uv;\n    gl_Position =  projectionMatrix * viewMatrix * modelPosition;\n  }\n`;\n\nexport default VertexShader;\n","const FragmentShader_2 = /*glsl*/ `\n  precision lowp float;\n  uniform float uTime;\n  uniform float uScale;\n  varying vec2 vUv; \n\n  void main(){\n    // 利用通过取模达到反复效果\n    float strength = mod(vUv.y * 10.0 , 1.0) ;\n    gl_FragColor = vec4(strength, strength, strength, 1);\n  }\n`;\n\nexport default FragmentShader_2;\n","const FragmentShader_3 = /*glsl*/ `\n  precision lowp float;\n  uniform float uTime;\n  uniform float uScale;\n  varying vec2 vUv; \n\n  void main(){\n    // 条纹相加\n    float strength = step(0.8, mod(vUv.x * 10.0 , 1.0));\n    strength += step(0.8, mod(vUv.y * 10.0 , 1.0));\n    gl_FragColor =vec4(strength, strength, strength, 1);\n  }\n`;\n\nexport default FragmentShader_3;\n","const FragmentShader_4 = /*glsl*/ `\n  precision lowp float;\n  uniform float uTime;\n  uniform float uScale;\n  varying vec2 vUv; \n\n  void main(){\n    // 利用绝对值\n    float strength = abs(vUv.x - 0.5) ;\n    gl_FragColor =vec4(strength,strength,strength,1);\n  }\n`;\n\nexport default FragmentShader_4;\n","const FragmentShader_5 = /*glsl*/ `\n  precision lowp float;\n  uniform float uTime;\n  uniform float uScale;\n  varying vec2 vUv; \n\n  void main(){\n    // 小日本国旗\n    float strength = step(0.5,distance(vUv,vec2(0.5))+0.25);\n    gl_FragColor =vec4(strength,strength,strength,1);\n  }\n`;\n\nexport default FragmentShader_5;","const FragmentShader_6 = /*glsl*/ `\n  precision lowp float;\n  uniform float uTime;\n  uniform float uScale;\n  varying vec2 vUv;\n\n  vec4 permute(vec4 x) {\n    return mod(((x*34.0)+1.0)*x, 289.0);\n  }\n\n  vec2 fade(vec2 t) {\n    return t*t*t*(t*(t*6.0-15.0)+10.0);\n  }\n\n  float cnoise(vec2 P) {\n    vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n    vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n    Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation\n    vec4 ix = Pi.xzxz;\n    vec4 iy = Pi.yyww;\n    vec4 fx = Pf.xzxz;\n    vec4 fy = Pf.yyww;\n    vec4 i = permute(permute(ix) + iy);\n    vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024...\n    vec4 gy = abs(gx) - 0.5;\n    vec4 tx = floor(gx + 0.5);\n    gx = gx - tx;\n    vec2 g00 = vec2(gx.x,gy.x);\n    vec2 g10 = vec2(gx.y,gy.y);\n    vec2 g01 = vec2(gx.z,gy.z);\n    vec2 g11 = vec2(gx.w,gy.w);\n    vec4 norm = 1.79284291400159 - 0.85373472095314 * vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\n    g00 *= norm.x;\n    g01 *= norm.y;\n    g10 *= norm.z;\n    g11 *= norm.w;\n    float n00 = dot(g00, vec2(fx.x, fy.x));\n    float n10 = dot(g10, vec2(fx.y, fy.y));\n    float n01 = dot(g01, vec2(fx.z, fy.z));\n    float n11 = dot(g11, vec2(fx.w, fy.w));\n    vec2 fade_xy = fade(Pf.xy);\n    vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n    float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n    return 2.3 * n_xy;\n  } \n\n  void main(){\n    // 通过时间实现动态选择\n    vec3 purpleColor = vec3(1.0, 0.0, 1.0);\n    vec3 greenColor = vec3(1.0, 1.0, 1.0);\n    vec3 uvColor = vec3(vUv,1.0);\n    float strength = step(0.9,sin(cnoise(vUv * 10.0)*20.0))  ;\n\n    vec3 mixColor =  mix(greenColor,uvColor,strength);\n    // gl_FragColor =vec4(mixColor,1.0);\n    gl_FragColor =vec4(mixColor,1.0);\n  }\n`;\n\nexport default FragmentShader_6;","/*\n * @Title: 3d全屏滚动\n * @Author: huangjitao\n * @Date: 2022-10-25 15:18:11\n * @Description: description of this file\n */\n\n\nimport { Typography } from \"antd\";\nimport { Link } from \"react-router-dom\";\n\nconst { Title } = Typography\n\nconst Chapter8_1 = () => {\n\n  return (\n    <div style={{ padding: '50px' }}>\n      <Typography>\n        <Title level={2}>\n          <Link to=\"/pages/scrollFull3d\">3d全屏滚动</Link>\n        </Title>\n      </Typography>\n    </div>\n  );\n}\n\nexport default Chapter8_1","/*\n * @Descripttion: 菜单配置\n * @Author: huangjitao\n * @Date: 2021-08-04 20:56:55\n * @Function: 菜单页面的路由配置\n */\n\nimport Chapter1_1 from \"../pages/chapter1-1\";\nimport Chapter1_2 from \"../pages/chapter1-2\";\nimport Chapter10_1 from \"../pages/chapter10-1\";\nimport Chapter10_2 from \"../pages/chapter10-2\";\nimport Chapter11_1 from \"../pages/chapter11-1\";\nimport Chapter11_2 from \"../pages/chapter11-2\";\nimport Chapter12_1 from \"../pages/chapter12-1\";\nimport Chapter2_1 from \"../pages/chapter2-1\";\nimport Chapter2_2 from \"../pages/chapter2-2\";\nimport Chapter2_3 from \"../pages/chapter2-3\";\nimport Chapter3_1 from \"../pages/chapter3-1\";\nimport Chapter3_2 from \"../pages/chapter3-2\";\nimport Chapter4_1 from \"../pages/chapter4-1\";\nimport Chapter4_2 from \"../pages/chapter4-2\";\nimport Chapter4_3 from \"../pages/chapter4-3\";\nimport Chapter4_4 from \"../pages/chapter4-4\";\nimport Chapter4_5 from \"../pages/chapter4-5\";\nimport Chapter4_6 from \"../pages/chapter4-6\";\nimport Chapter5_1 from \"../pages/chapter5-1\";\nimport Chapter5_2 from \"../pages/chapter5-2\";\nimport Chapter5_3 from \"../pages/chapter5-3\";\nimport Chapter6_1 from \"../pages/chapter6-1\";\nimport Chapter6_2 from \"../pages/chapter6-2\";\nimport Chapter6_3 from \"../pages/chapter6-3\";\nimport Chapter7_1 from \"../pages/chapter7-1\";\nimport Chapter8_1 from \"../pages/chapter8-1\";\nimport Chapter9_1 from \"../pages/chapter9-1\";\nimport Chapter9_2 from \"../pages/chapter9-2\";\n\nexport const menu = [\n  {\n    label: \"1. Three.js介绍\",\n    key: \"1\",\n    children: [\n      {\n        label: \"1.1 Three.js简介\",\n        key: \"1-1\",\n        path: \"/abstract/feature\",\n        component: Chapter1_1,\n      },\n      {\n        label: \"1.2 Three.js快速上手\",\n        key: \"1-2\",\n        path: \"/abstract/firstTry\",\n        component: Chapter1_2,\n      },\n    ]\n  },\n  {\n    label: \"2. Three.js基本操作\",\n    key: \"2\",\n    children: [\n      {\n        label: \"2.1 操作物体\",\n        key: \"2-1\",\n        path: \"/basicOpt/objOpt\",\n        component: Chapter2_1,\n      },\n      {\n        label: \"2.2 基本动画操作\",\n        key: \"2-2\",\n        path: \"/basicOpt/animation\",\n        component: Chapter2_2,\n      },\n      {\n        label: \"2.3 图形界面工具\",\n        key: \"2-3\",\n        path: \"/basicOpt/gui-tool\",\n        component: Chapter2_3,\n      },\n    ]\n  },\n  {\n    label: \"3. Three.js物体\",\n    key: \"3\",\n    children: [\n      {\n        label: \"3.1 自定义几何体\",\n        key: \"3-1\",\n        path: \"/mesh/customGeometry\",\n        component: Chapter3_1,\n      },\n      {\n        label: \"3.2 随机炫酷几何体\",\n        key: \"3-2\",\n        path: \"/mesh/awesomeGeometry\",\n        component: Chapter3_2,\n      },\n    ]\n  },\n  {\n    label: \"4. 材质与纹理\",\n    key: \"4\",\n    children: [\n      {\n        label: \"4.1 加载纹理\",\n        key: \"4-1\",\n        path: \"/textures/loadTexture\",\n        component: Chapter4_1,\n      },\n      {\n        label: \"4.2 纹理变换\",\n        key: \"4-2\",\n        path: \"/textures/textureTransform\",\n        component: Chapter4_2,\n      },\n      {\n        label: \"4.3 纹理显示算法\",\n        key: \"4-3\",\n        path: \"/textures/textureMinMap\",\n        component: Chapter4_3,\n      },\n      {\n        label: \"4.4 基础材质参数\",\n        key: \"4-4\",\n        path: \"/textures/basicMaterial\",\n        component: Chapter4_4,\n      },\n      {\n        label: \"4.5 标准材质参数\",\n        key: \"4-5\",\n        path: \"/textures/standardMaterial\",\n        component: Chapter4_5,\n      },\n      {\n        label: \"4.6 环境贴图与hdr\",\n        key: \"4-6\",\n        path: \"/textures/envhdr\",\n        component: Chapter4_6,\n      },\n    ]\n  },\n  {\n    label: \"5. 光源\",\n    key: \"5\",\n    children: [\n      {\n        label: \"5.1 平行光\",\n        key: \"5-1\",\n        path: \"/light/directionalLight\",\n        component: Chapter5_1,\n      },\n      {\n        label: \"5.2 聚光灯\",\n        key: \"5-2\",\n        path: \"/light/spotLight\",\n        component: Chapter5_2,\n      },\n      {\n        label: \"5.3 点光源\",\n        key: \"5-3\",\n        path: \"/light/pointLight\",\n        component: Chapter5_3,\n      },\n    ]\n  },\n  {\n    label: \"6. 粒子特效\",\n    key: \"6\",\n    children: [\n      {\n        label: \"6.1 点材质\",\n        key: \"6-1\",\n        path: \"/particles/pointsMaterial\",\n        component: Chapter6_1,\n      },\n      {\n        label: \"6.2 自定义雪花粒子特效\",\n        key: \"6-2\",\n        path: \"/particles/customSnow\",\n        component: Chapter6_2,\n      },\n      {\n        label: \"6.3 银河系粒子特效\",\n        key: \"6-3\",\n        path: \"/particles/galaxy\",\n        component: Chapter6_3,\n      },\n    ]\n  },\n  {\n    label: \"7. 光线投射\",\n    key: \"7\",\n    children: [\n      {\n        label: \"7.1 光线投射\",\n        key: \"7-1\",\n        path: \"/raycaster\",\n        component: Chapter7_1,\n      },\n    ]\n  },\n  {\n    label: \"8. 3d全屏滚动\",\n    key: \"8\",\n    children: [\n      {\n        label: \"8.1 3d全屏滚动\",\n        key: \"8-1\",\n        path: \"/scrollFull3d\",\n        component: Chapter8_1,\n      },\n    ]\n  },\n  {\n    label: \"9. 应用物理引擎\",\n    key: \"9\",\n    children: [\n      {\n        label: \"9.1 使用cannon创建物理世界\",\n        key: \"9-1\",\n        path: \"/physics/createWorld\",\n        component: Chapter9_1,\n      },\n      {\n        label: \"9.2 模拟物理世界的相互作用力\",\n        key: \"9-2\",\n        path: \"/physics/applyForce\",\n        component: Chapter9_2,\n      },\n    ]\n  },\n  {\n    label: \"10. webgl原理\",\n    key: \"10\",\n    children: [\n      {\n        label: \"10.1 使用webgl绘制图形\",\n        key: \"10-1\",\n        path: \"/webgl/drawTriangle\",\n        component: Chapter10_1,\n      },\n      {\n        label: \"10.2 使用webgl绘制动画\",\n        key: \"10-2\",\n        path: \"/webgl/animate\",\n        component: Chapter10_2,\n      },\n    ]\n  },\n  {\n    label: \"11. 着色器编程：入门\",\n    key: \"11\",\n    children: [\n      {\n        label: \"11.1 着色器材质\",\n        key: \"11-1\",\n        path: \"/webglBasic/shaderMaterial\",\n        component: Chapter11_1,\n      },\n      {\n        label: \"11.2 原始着色器材质\",\n        key: \"11-2\",\n        path: \"/webglBasic/rawShaderMaterial\",\n        component: Chapter11_2,\n      },\n    ]\n  },\n  {\n    label: \"12. 着色器编程：进阶\",\n    key: \"12\",\n    children: [\n      {\n        label: \"12.1 着色器编写图案\",\n        key: \"12-1\",\n        path: \"/webglAdvance/basicGraph\",\n        component: Chapter12_1,\n      },\n    ]\n  },\n]","/*\n * @Descripttion: 选中的菜单的相关信息\n * @Author: huangjitao\n * @Date: 2021-08-04 21:35:38\n * @Function: 该文件用途描述\n */\n\nimport { useEffect } from \"react\"\nimport { useLocation } from \"react-router\"\nimport { useImmer } from \"use-immer\"\nimport { menu } from \"../consts/menu\"\n\ninterface StateProps {\n  selectedKeys: string[];\n  openKeys: string[];\n  title: string\n}\n\nexport const useSelectedMenu = () => {\n  const [state, setState] = useImmer<StateProps>({\n    selectedKeys: [],\n    openKeys: [],\n    title: ''\n  })\n  const {pathname} = useLocation()\n\n  useEffect(() => {\n    menu.forEach(item => {\n      item.children.forEach(child => {\n        if (child.path === pathname) {\n          setState(state => {\n            state.openKeys = [item.key]\n            state.selectedKeys = [child.key]\n            state.title = child.label\n          })\n        }\n      })\n    })\n  }, [pathname])\n\n  return {\n    selectedKeys: state.selectedKeys,\n    openKeys: state.openKeys,\n    title: state.title\n  }\n}","/*\n * @Descripttion: 右侧导航栏\n * @Author: huangjitao\n * @Date: 2021-08-04 21:14:56\n * @Function: 该文件用途描述\n */\n\nimport { Menu } from \"antd\";\nimport { menu } from \"../consts/menu\";\nimport { useSelectedMenu } from \"../utils/useSelectedMenu\";\n\nconst { SubMenu } = Menu;\n\nconst SideMenu = () => {\n  const { selectedKeys } = useSelectedMenu();\n  const changeChapter = (path: string) => {\n    window.location.href = `http://${window.location.host}${path}`\n  }\n  return (\n    <Menu\n      style={{ width: \"100%\", height: \"100%\" }}\n      selectedKeys={selectedKeys}\n      mode=\"inline\"\n    >\n      {menu.map((item) => (\n        <SubMenu key={item.key} title={item.label}>\n          {item.children.map((child) => (\n            <Menu.Item key={child.key} onClick={() => changeChapter(child.path)}>\n              {child.label}\n            </Menu.Item>\n          ))}\n        </SubMenu>\n      ))}\n    </Menu>\n  );\n};\n\nexport default SideMenu;\n","/*\n * @Descripttion: 页面通用头部组件\n * @Date: 2021-08-04 22:09:56\n * @Function: 该文件用途描述\n */\n\nimport { useSelectedMenu } from \"../utils/useSelectedMenu\";\n\nconst PageHeader = () => {\n  const { title } = useSelectedMenu();\n  return (\n    <div style={{ marginLeft: 25 }}>\n      <h1 style={{ color: \"#fff\" }}>{title}</h1>\n    </div>\n  );\n};\n\nexport default PageHeader;\n","import ScrollFull3d from \"../pages/ScrollFull3d\";\n\n/*\n * @Title: 页面路由\n * @Author: huangjitao\n * @Date: 2022-10-25 14:49:49\n * @Description: 非菜单页面的路由配置\n */\nexport const pages = [\n  {\n    label: \"3d全屏滚动\",\n    key: \"pages-1\",\n    path: \"/pages/scrollFull3d\",\n    component: ScrollFull3d,\n  },\n  {\n    label: \"3d全屏滚动2\",\n    key: \"pages-2\",\n    path: \"/pages/scrollFull3d2\",\n    component: '12',\n  },\n];\n","/*\n * @Descripttion: 应用主入口\n * @Author: huangjitao\n * @Date: 2021-08-04 20:27:49\n * @Function: 该文件用途描述\n */\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Layout } from \"antd\";\nimport SideMenu from \"./components/SideMunu\";\nimport { Navigate, Route, Routes, useLocation } from \"react-router-dom\";\nimport { menu } from \"./consts/menu\";\nimport PageHeader from \"./components/PageHeader\";\nimport { pages } from \"./consts/pages\";\n\nconst { Sider, Header, Content } = Layout;\n\nfunction App() {\n  const [collapsed, setCollapsed] = useState(false);\n  const onCollapse = () => {\n    setCollapsed(!collapsed);\n  };\n  const location = useLocation();\n  if (location.pathname.includes('/pages')) {\n    return (\n      <div>\n        <Routes>\n          {pages.map(item => (\n            <Route path={item.path} element={<item.component />} />\n          ))}\n        </Routes>\n      </div>\n    )\n  }\n  return (\n    <div className=\"App\">\n      <Layout style={{ height: \"100%\" }}>\n        <Sider\n          width={256}\n          collapsible\n          collapsed={collapsed}\n          onCollapse={onCollapse}\n        >\n          <SideMenu />\n        </Sider>\n        <Layout>\n          <Header>\n            <PageHeader />\n          </Header>\n          <Content>\n            <Routes>\n              {menu.map((item) => {\n                if (item.children) {\n                  return item.children.map((child) => (\n                    <Route path={child.path} element={<child.component />} />\n                  ));\n                } else {\n                  return null;\n                }\n              })}\n              <Navigate to={\"/abstract/feature\"} />\n            </Routes>\n          </Content>\n        </Layout>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/*\n * @Descripttion: \n * @Author: huangjitao\n * @Date: 2021-08-04 20:27:49\n * @Function: 该文件用途描述\n */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'antd/dist/antd.css';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}